// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Result.proto

package com.felania.msldb;

public final class ResultOuterClass {
  private ResultOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code msggamedata.Result}
   */
  public enum Result
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ResultOk = 0;</code>
     */
    ResultOk(0),
    /**
     * <code>ErrorUnknown = 1;</code>
     */
    ErrorUnknown(1),
    /**
     * <code>ErrorInvalidProtocolVersion = 2;</code>
     */
    ErrorInvalidProtocolVersion(2),
    /**
     * <code>ErrorCountLimit = 10;</code>
     */
    ErrorCountLimit(10),
    /**
     * <code>ErrorTimeLimit = 11;</code>
     */
    ErrorTimeLimit(11),
    /**
     * <code>ErrorInternalServerError = 50;</code>
     */
    ErrorInternalServerError(50),
    /**
     * <code>ErrorDataInvalid = 60;</code>
     */
    ErrorDataInvalid(60),
    /**
     * <code>ErrorUserNameAlreadyExists = 61;</code>
     */
    ErrorUserNameAlreadyExists(61),
    /**
     * <code>ErrorUserNameInvalid = 62;</code>
     */
    ErrorUserNameInvalid(62),
    /**
     * <code>ErrorUserNotRegistered = 63;</code>
     */
    ErrorUserNotRegistered(63),
    /**
     * <code>ErrorUserAlreadyRegistered = 64;</code>
     */
    ErrorUserAlreadyRegistered(64),
    /**
     * <code>ErrorUserNameForbidden = 65;</code>
     */
    ErrorUserNameForbidden(65),
    /**
     * <code>ErrorUserNameRestrictLength = 66;</code>
     */
    ErrorUserNameRestrictLength(66),
    /**
     * <code>ErrorUserDuplicatedLogin = 67;</code>
     */
    ErrorUserDuplicatedLogin(67),
    /**
     * <code>ErrorPlatformTypeNotFind = 68;</code>
     */
    ErrorPlatformTypeNotFind(68),
    /**
     * <code>ErrorPlatformAccountIdNotExist = 69;</code>
     */
    ErrorPlatformAccountIdNotExist(69),
    /**
     * <code>ErrorAccountNotExist = 70;</code>
     */
    ErrorAccountNotExist(70),
    /**
     * <code>ErrorAccountWithdraw = 79;</code>
     */
    ErrorAccountWithdraw(79),
    /**
     * <code>ErrorAlreadyCreatedPlatformAccount = 80;</code>
     */
    ErrorAlreadyCreatedPlatformAccount(80),
    /**
     * <code>ErrorAbusing = 90;</code>
     */
    ErrorAbusing(90),
    /**
     * <code>ErrorNearAbusing = 91;</code>
     */
    ErrorNearAbusing(91),
    /**
     * <code>ErrorLoginOnMaintenance = 92;</code>
     */
    ErrorLoginOnMaintenance(92),
    /**
     * <code>ErrorUserInvalid = 100;</code>
     */
    ErrorUserInvalid(100),
    /**
     * <code>ErrorUserPasswordInvalid = 101;</code>
     */
    ErrorUserPasswordInvalid(101),
    /**
     * <code>ErrorUserTokenInvalid = 102;</code>
     */
    ErrorUserTokenInvalid(102),
    /**
     * <code>ErrorUserSeqNoInvalid = 103;</code>
     */
    ErrorUserSeqNoInvalid(103),
    /**
     * <code>ErrorUserTicketInvalid = 104;</code>
     */
    ErrorUserTicketInvalid(104),
    /**
     * <code>ErrorUserCacheInvalid = 105;</code>
     */
    ErrorUserCacheInvalid(105),
    /**
     * <code>ErrorUserSanctioned = 106;</code>
     */
    ErrorUserSanctioned(106),
    /**
     * <code>ErrorUserNickExists = 110;</code>
     */
    ErrorUserNickExists(110),
    /**
     * <code>ErrorUserNickDenied = 111;</code>
     */
    ErrorUserNickDenied(111),
    /**
     * <code>ErrorUserGemInsufficient = 150;</code>
     */
    ErrorUserGemInsufficient(150),
    /**
     * <code>ErrorUserGoldInsufficient = 151;</code>
     */
    ErrorUserGoldInsufficient(151),
    /**
     * <code>ErrorUserLevelInsufficient = 152;</code>
     */
    ErrorUserLevelInsufficient(152),
    /**
     * <code>ErrorUserArenaPointInsufficient = 153;</code>
     */
    ErrorUserArenaPointInsufficient(153),
    /**
     * <code>ErrorUserArenaTicketInsufficient = 154;</code>
     */
    ErrorUserArenaTicketInsufficient(154),
    /**
     * <code>ErrorUserDungeonPointInsufficient = 155;</code>
     */
    ErrorUserDungeonPointInsufficient(155),
    /**
     * <code>ErrorUserLikeTicketInsufficient = 156;</code>
     */
    ErrorUserLikeTicketInsufficient(156),
    /**
     * <code>ErrorUserCrystalInsufficient = 157;</code>
     */
    ErrorUserCrystalInsufficient(157),
    /**
     * <code>ErrorUserBeyondStoneInsufficient = 158;</code>
     */
    ErrorUserBeyondStoneInsufficient(158),
    /**
     * <code>ErrorUserClanPointInsufficient = 159;</code>
     */
    ErrorUserClanPointInsufficient(159),
    /**
     * <code>ErrorFriendRequestMe = 170;</code>
     */
    ErrorFriendRequestMe(170),
    /**
     * <code>ErrorFriendNotExists = 171;</code>
     */
    ErrorFriendNotExists(171),
    /**
     * <code>ErrorFriendsFull = 172;</code>
     */
    ErrorFriendsFull(172),
    /**
     * <code>ErrorFriendsBreakUpMax = 173;</code>
     */
    ErrorFriendsBreakUpMax(173),
    /**
     * <code>ErrorFriendsReceiverFull = 174;</code>
     */
    ErrorFriendsReceiverFull(174),
    /**
     * <code>ErrorFriendAlreadyRequested = 175;</code>
     */
    ErrorFriendAlreadyRequested(175),
    /**
     * <code>ErrorFriendAlreadyAccepted = 176;</code>
     */
    ErrorFriendAlreadyAccepted(176),
    /**
     * <code>ErrorFriendFindMe = 177;</code>
     */
    ErrorFriendFindMe(177),
    /**
     * <code>ErrorMailAlreadyAccepted = 180;</code>
     */
    ErrorMailAlreadyAccepted(180),
    /**
     * <code>ErrorMailInventoryFull = 181;</code>
     */
    ErrorMailInventoryFull(181),
    /**
     * <code>ErrorMailBodyTooLong = 182;</code>
     */
    ErrorMailBodyTooLong(182),
    /**
     * <code>ErrorMailInvalid = 183;</code>
     */
    ErrorMailInvalid(183),
    /**
     * <code>ErrorMailNotAccepted = 184;</code>
     */
    ErrorMailNotAccepted(184),
    /**
     * <code>ErrorMailAlreadyDeleted = 185;</code>
     */
    ErrorMailAlreadyDeleted(185),
    /**
     * <code>ErrorUserMonsterNotExists = 186;</code>
     */
    ErrorUserMonsterNotExists(186),
    /**
     * <code>ErrorUserUnknownPayMethod = 187;</code>
     */
    ErrorUserUnknownPayMethod(187),
    /**
     * <code>ErrorUserMonsterSummonableCountZero = 188;</code>
     */
    ErrorUserMonsterSummonableCountZero(188),
    /**
     * <code>ErrorUserMonsterNotEnoughLev = 189;</code>
     */
    ErrorUserMonsterNotEnoughLev(189),
    /**
     * <code>ErrorUserMonsterNotEnoughEvolution = 190;</code>
     */
    ErrorUserMonsterNotEnoughEvolution(190),
    /**
     * <code>ErrorUserMonsterAlreadyMaxLevel = 191;</code>
     */
    ErrorUserMonsterAlreadyMaxLevel(191),
    /**
     * <code>ErrorUserMonsterNotEnoughBeyondStone = 192;</code>
     */
    ErrorUserMonsterNotEnoughBeyondStone(192),
    /**
     * <code>ErrorUserMonsterNotEnoughSoulstone = 193;</code>
     */
    ErrorUserMonsterNotEnoughSoulstone(193),
    /**
     * <code>ErrorUserMonsterAlreadyMaxEvolution = 194;</code>
     */
    ErrorUserMonsterAlreadyMaxEvolution(194),
    /**
     * <code>ErrorUserMonsterNotEnoughBornGrade = 195;</code>
     */
    ErrorUserMonsterNotEnoughBornGrade(195),
    /**
     * <code>ErrorUserMonsterAlreadySpecial = 196;</code>
     */
    ErrorUserMonsterAlreadySpecial(196),
    /**
     * <code>ErrorUserMonsterIncongruity = 197;</code>
     */
    ErrorUserMonsterIncongruity(197),
    /**
     * <code>ErrorUserMonsterExceed = 198;</code>
     */
    ErrorUserMonsterExceed(198),
    /**
     * <code>ErrorUserMonsterFullyWarmUp = 199;</code>
     */
    ErrorUserMonsterFullyWarmUp(199),
    /**
     * <code>ErrorUserEnergyInsufficient = 200;</code>
     */
    ErrorUserEnergyInsufficient(200),
    /**
     * <code>ErrorUserEnergyAlreadyMax = 201;</code>
     */
    ErrorUserEnergyAlreadyMax(201),
    /**
     * <code>ErrorUserArenaAlreadyMax = 202;</code>
     */
    ErrorUserArenaAlreadyMax(202),
    /**
     * <code>ErrorShopMetaGunAlreadyMax = 203;</code>
     */
    ErrorShopMetaGunAlreadyMax(203),
    /**
     * <code>ErrorShopMetaBulletAlreadyMax = 204;</code>
     */
    ErrorShopMetaBulletAlreadyMax(204),
    /**
     * <code>ErrorUserMonsterLocked = 205;</code>
     */
    ErrorUserMonsterLocked(205),
    /**
     * <code>ErrorUserMonsterRepresentationLocked = 206;</code>
     */
    ErrorUserMonsterRepresentationLocked(206),
    /**
     * <code>ErrorRuneMetaNoMileageItem = 207;</code>
     */
    ErrorRuneMetaNoMileageItem(207),
    /**
     * <code>RuneMetaJustUsedMileage = 208;</code>
     */
    RuneMetaJustUsedMileage(208),
    /**
     * <code>ErrorMonsterMetaNotAvailableTimestamp = 209;</code>
     */
    ErrorMonsterMetaNotAvailableTimestamp(209),
    /**
     * <code>ErrorMonsterSlotAlreadyFull = 210;</code>
     */
    ErrorMonsterSlotAlreadyFull(210),
    /**
     * <code>ErrorUserCaptureBulletNotEnough = 211;</code>
     */
    ErrorUserCaptureBulletNotEnough(211),
    /**
     * <code>ErrorTimeLeft = 212;</code>
     */
    ErrorTimeLeft(212),
    /**
     * <code>ErrorGiftNotExists = 213;</code>
     */
    ErrorGiftNotExists(213),
    /**
     * <code>ErrorUserDungeonTicketInsufficient = 214;</code>
     */
    ErrorUserDungeonTicketInsufficient(214),
    /**
     * <code>ErrorDungeonTodayIsNotOpenDay = 215;</code>
     */
    ErrorDungeonTodayIsNotOpenDay(215),
    /**
     * <code>ErrorUserMonsterSummonLimitExpired = 216;</code>
     */
    ErrorUserMonsterSummonLimitExpired(216),
    /**
     * <code>ErrorArenaDefenseHasEmptySlot = 217;</code>
     */
    ErrorArenaDefenseHasEmptySlot(217),
    /**
     * <code>ErrorRuneMetaNotAvailableTimestamp = 218;</code>
     */
    ErrorRuneMetaNotAvailableTimestamp(218),
    /**
     * <code>ErrorSupportMonsterCanNotUseToday = 219;</code>
     */
    ErrorSupportMonsterCanNotUseToday(219),
    /**
     * <code>ErrorSupportMonsterAlreadyUsed = 220;</code>
     */
    ErrorSupportMonsterAlreadyUsed(220),
    /**
     * <code>ErrorNotEnoughSentCount = 221;</code>
     */
    ErrorNotEnoughSentCount(221),
    /**
     * <code>ErrorArenaCandidatesIsNotAllClear = 222;</code>
     */
    ErrorArenaCandidatesIsNotAllClear(222),
    /**
     * <code>ErrorSupportMonsterCanNotUseExcludeStory = 223;</code>
     */
    ErrorSupportMonsterCanNotUseExcludeStory(223),
    /**
     * <code>ErrorArenaRankServerNoResponse = 224;</code>
     */
    ErrorArenaRankServerNoResponse(224),
    /**
     * <code>ErrorRankingInReset = 225;</code>
     */
    ErrorRankingInReset(225),
    /**
     * <code>ErrorIAPReceiptCheckInvalid = 226;</code>
     */
    ErrorIAPReceiptCheckInvalid(226),
    /**
     * <code>ErrorIAPReceiptCheckFail = 227;</code>
     */
    ErrorIAPReceiptCheckFail(227),
    /**
     * <code>ErrorLobbyRewardAlreadyRecved = 228;</code>
     */
    ErrorLobbyRewardAlreadyRecved(228),
    /**
     * <code>ErrorLobbyRewardTimeExceed = 229;</code>
     */
    ErrorLobbyRewardTimeExceed(229),
    /**
     * <code>ErrorLobbyRewardNotExist = 230;</code>
     */
    ErrorLobbyRewardNotExist(230),
    /**
     * <code>ErrorArenaEnemyInvalid = 231;</code>
     */
    ErrorArenaEnemyInvalid(231),
    /**
     * <code>ErrorUserMonsterOnArenaDefense = 232;</code>
     */
    ErrorUserMonsterOnArenaDefense(232),
    /**
     * <code>ErrorUserMonsterOnForceLocked = 233;</code>
     */
    ErrorUserMonsterOnForceLocked(233),
    /**
     * <code>ErrorUserMonsterMaxSoulStone = 234;</code>
     */
    ErrorUserMonsterMaxSoulStone(234),
    /**
     * <code>ErrorUserMonsterSummonDataError = 235;</code>
     */
    ErrorUserMonsterSummonDataError(235),
    /**
     * <code>ErrorUserMonsterSkillBookNotExistOrCountIsZero = 236;</code>
     */
    ErrorUserMonsterSkillBookNotExistOrCountIsZero(236),
    /**
     * <code>ErrorMonsterNotUseSkillLevel = 237;</code>
     */
    ErrorMonsterNotUseSkillLevel(237),
    /**
     * <code>ErrorSkillBookIsNotMatchedToUserMonster = 238;</code>
     */
    ErrorSkillBookIsNotMatchedToUserMonster(238),
    /**
     * <code>ErrorUserMonsterSkillFullyUpgraded = 239;</code>
     */
    ErrorUserMonsterSkillFullyUpgraded(239),
    /**
     * <code>ErrorUserMonsterNotEnoughGradeToUpgradeSkill = 240;</code>
     */
    ErrorUserMonsterNotEnoughGradeToUpgradeSkill(240),
    /**
     * <code>ErrorDungeonOpenConditionNeedUserLevel = 241;</code>
     */
    ErrorDungeonOpenConditionNeedUserLevel(241),
    /**
     * <code>ErrorDungeonOpenConditionNotClearedSubStage = 242;</code>
     */
    ErrorDungeonOpenConditionNotClearedSubStage(242),
    /**
     * <code>ErrorUserRuneNotExist = 300;</code>
     */
    ErrorUserRuneNotExist(300),
    /**
     * <code>ErrorUserRuneAlreadyMaxLevel = 301;</code>
     */
    ErrorUserRuneAlreadyMaxLevel(301),
    /**
     * <code>ErrorRuneInvenExceed = 302;</code>
     */
    ErrorRuneInvenExceed(302),
    /**
     * <code>ErrorUserMonsterLeaderSkillGradeLower = 303;</code>
     */
    ErrorUserMonsterLeaderSkillGradeLower(303),
    /**
     * <code>ErrorUserRuneIsLocked = 304;</code>
     */
    ErrorUserRuneIsLocked(304),
    /**
     * <code>ErrorAlreadyStoredUserMonster = 305;</code>
     */
    ErrorAlreadyStoredUserMonster(305),
    /**
     * <code>ErrorUserMonsterIsLocked = 306;</code>
     */
    ErrorUserMonsterIsLocked(306),
    /**
     * <code>ErrorExceedUserMonsterStore = 307;</code>
     */
    ErrorExceedUserMonsterStore(307),
    /**
     * <code>ErrorMonsterStorageAlreadyMax = 308;</code>
     */
    ErrorMonsterStorageAlreadyMax(308),
    /**
     * <code>ErrorMonsterStorageInvalid = 309;</code>
     */
    ErrorMonsterStorageInvalid(309),
    /**
     * <code>ErrorUserRuneNotMatchedShape = 310;</code>
     */
    ErrorUserRuneNotMatchedShape(310),
    /**
     * <code>ErrorColossusDungeonMonsterCountInvalid = 350;</code>
     */
    ErrorColossusDungeonMonsterCountInvalid(350),
    /**
     * <code>ErrorUseSameRootMonster = 351;</code>
     */
    ErrorUseSameRootMonster(351),
    /**
     * <code>ErrorMaxSpecialGuradianDungeonClearCount = 360;</code>
     */
    ErrorMaxSpecialGuradianDungeonClearCount(360),
    /**
     * <code>ErrorMonsterInvenAlreadyMax = 400;</code>
     */
    ErrorMonsterInvenAlreadyMax(400),
    /**
     * <code>ErrorMonsterInvenInvalidPrice = 401;</code>
     */
    ErrorMonsterInvenInvalidPrice(401),
    /**
     * <code>ErrorMonsterInvenExceed = 402;</code>
     */
    ErrorMonsterInvenExceed(402),
    /**
     * <code>ErrorBingoInsufficientForReward = 404;</code>
     */
    ErrorBingoInsufficientForReward(404),
    /**
     * <code>ErrorBingoInvalidRequest = 405;</code>
     */
    ErrorBingoInvalidRequest(405),
    /**
     * <code>ErrorBingoDataNotExist = 406;</code>
     */
    ErrorBingoDataNotExist(406),
    /**
     * <code>ErrorCaptureFestivalNotExist = 450;</code>
     */
    ErrorCaptureFestivalNotExist(450),
    /**
     * <code>ErrorUserCaptureFestivalNotExist = 451;</code>
     */
    ErrorUserCaptureFestivalNotExist(451),
    /**
     * <code>ErrorInvalidCaptureFestivalSeason = 452;</code>
     */
    ErrorInvalidCaptureFestivalSeason(452),
    /**
     * <code>ErrorInvalidCaptureFestivalFinaleSeason = 453;</code>
     */
    ErrorInvalidCaptureFestivalFinaleSeason(453),
    /**
     * <code>ErrorLuckyTicketInsufficient = 454;</code>
     */
    ErrorLuckyTicketInsufficient(454),
    /**
     * <code>ErrorMaxLuckyTicket = 455;</code>
     */
    ErrorMaxLuckyTicket(455),
    /**
     * <code>ErrorLogRefreshCaptureFestivalNotExist = 456;</code>
     */
    ErrorLogRefreshCaptureFestivalNotExist(456),
    /**
     * <code>ErrorAlreadyGetRankReward = 457;</code>
     */
    ErrorAlreadyGetRankReward(457),
    /**
     * <code>ErrorAlreadyGetBonusLuckyTicket = 458;</code>
     */
    ErrorAlreadyGetBonusLuckyTicket(458),
    /**
     * <code>ErrorBonusLuckyTicketIsGone = 459;</code>
     */
    ErrorBonusLuckyTicketIsGone(459),
    /**
     * <code>ErrorShopStockInvalid = 500;</code>
     */
    ErrorShopStockInvalid(500),
    /**
     * <code>ErrorItemCountInsufficient = 501;</code>
     */
    ErrorItemCountInsufficient(501),
    /**
     * <code>ErrorItemInvalid = 502;</code>
     */
    ErrorItemInvalid(502),
    /**
     * <code>ErrorItemRetainExceed = 503;</code>
     */
    ErrorItemRetainExceed(503),
    /**
     * <code>ErrorBeyondStoneRetainExceed = 504;</code>
     */
    ErrorBeyondStoneRetainExceed(504),
    /**
     * <code>ErrorUserItemNotExist = 505;</code>
     */
    ErrorUserItemNotExist(505),
    /**
     * <code>ErrorPurchase = 550;</code>
     */
    ErrorPurchase(550),
    /**
     * <code>ErrorInvalidPurchaseItem = 551;</code>
     */
    ErrorInvalidPurchaseItem(551),
    /**
     * <code>ErrorInvalidPurchaseId = 552;</code>
     */
    ErrorInvalidPurchaseId(552),
    /**
     * <code>ErrorInvalidPurchaseData = 553;</code>
     */
    ErrorInvalidPurchaseData(553),
    /**
     * <code>ErrorAlreadyCompletePurchase = 554;</code>
     */
    ErrorAlreadyCompletePurchase(554),
    /**
     * <code>ErrorAlreadyPurchasePackage = 555;</code>
     */
    ErrorAlreadyPurchasePackage(555),
    /**
     * <code>ErrorClosedPackageItem = 556;</code>
     */
    ErrorClosedPackageItem(556),
    /**
     * <code>ErrorInvalidPackageItem = 557;</code>
     */
    ErrorInvalidPackageItem(557),
    /**
     * <code>ErrorInvalidPackageRewardIndex = 558;</code>
     */
    ErrorInvalidPackageRewardIndex(558),
    /**
     * <code>ErrorAlreadyReceivePackageReward = 559;</code>
     */
    ErrorAlreadyReceivePackageReward(559),
    /**
     * <code>ErrorAlreadyCompletePackage = 560;</code>
     */
    ErrorAlreadyCompletePackage(560),
    /**
     * <code>ErrorInvalidPackageQuest = 561;</code>
     */
    ErrorInvalidPackageQuest(561),
    /**
     * <code>ErrorExpiredJojeShopItem = 562;</code>
     */
    ErrorExpiredJojeShopItem(562),
    /**
     * <code>ErrorDuplicatedOrderID = 563;</code>
     */
    ErrorDuplicatedOrderID(563),
    /**
     * <code>ErrorInvalidPackagePurchaseBonus = 564;</code>
     */
    ErrorInvalidPackagePurchaseBonus(564),
    /**
     * <code>ErrorNotAvailableProductId = 565;</code>
     */
    ErrorNotAvailableProductId(565),
    /**
     * <code>ErrorClosedShopItem = 566;</code>
     */
    ErrorClosedShopItem(566),
    /**
     * <code>ErrorAlreadyPurchaseFestivalTicket = 567;</code>
     */
    ErrorAlreadyPurchaseFestivalTicket(567),
    /**
     * <code>ErrorNotAvailableHeroFestival = 568;</code>
     */
    ErrorNotAvailableHeroFestival(568),
    /**
     * <code>ErrorUserFestivalTicketInsufficient = 569;</code>
     */
    ErrorUserFestivalTicketInsufficient(569),
    /**
     * <code>ErrorNotAvailableTicketSalesDate = 570;</code>
     */
    ErrorNotAvailableTicketSalesDate(570),
    /**
     * <code>ErrorExceedUserSkillBook = 571;</code>
     */
    ErrorExceedUserSkillBook(571),
    /**
     * <code>ErrorNotInClanFestival = 572;</code>
     */
    ErrorNotInClanFestival(572),
    /**
     * <code>ErrorInvalidClanFestivalGift = 573;</code>
     */
    ErrorInvalidClanFestivalGift(573),
    /**
     * <code>ErrorHeroEssenceInsufficient = 574;</code>
     */
    ErrorHeroEssenceInsufficient(574),
    /**
     * <code>ErrorGetMaxClanFestivalReward = 575;</code>
     */
    ErrorGetMaxClanFestivalReward(575),
    /**
     * <code>ErrorInvalidBoosterPackage = 576;</code>
     */
    ErrorInvalidBoosterPackage(576),
    /**
     * <code>ErrorPurchaseDuplicatedPackage = 600;</code>
     */
    ErrorPurchaseDuplicatedPackage(600),
    /**
     * <code>ErrorPurchaseAppleServerError = 601;</code>
     */
    ErrorPurchaseAppleServerError(601),
    /**
     * <code>ErrorReservedCode3 = 602;</code>
     */
    ErrorReservedCode3(602),
    /**
     * <code>ErrorReservedCode4 = 603;</code>
     */
    ErrorReservedCode4(603),
    /**
     * <code>ErrorReservedCode5 = 604;</code>
     */
    ErrorReservedCode5(604),
    /**
     * <code>ErrorItemBundleMaxPurchase = 650;</code>
     */
    ErrorItemBundleMaxPurchase(650),
    /**
     * <code>ErrorItemBundleNotSalePeriod = 651;</code>
     */
    ErrorItemBundleNotSalePeriod(651),
    /**
     * <code>ErrorInvalidItemBundleReward = 652;</code>
     */
    ErrorInvalidItemBundleReward(652),
    /**
     * <code>ErrorInvalidItemBundle = 653;</code>
     */
    ErrorInvalidItemBundle(653),
    /**
     * <code>ErrorAlreadyPurchaseLobbyShip = 660;</code>
     */
    ErrorAlreadyPurchaseLobbyShip(660),
    /**
     * <code>ErrorUserShipExpired = 661;</code>
     */
    ErrorUserShipExpired(661),
    /**
     * <code>ErrorInvalidUserShip = 662;</code>
     */
    ErrorInvalidUserShip(662),
    /**
     * <code>ErrorUserShipNotUpdated = 663;</code>
     */
    ErrorUserShipNotUpdated(663),
    /**
     * <code>ErrorExistUnexpiredUserShip = 664;</code>
     */
    ErrorExistUnexpiredUserShip(664),
    /**
     * <code>ErrorQuestNotFound = 700;</code>
     */
    ErrorQuestNotFound(700),
    /**
     * <code>ErrorQuestIncomplete = 701;</code>
     */
    ErrorQuestIncomplete(701),
    /**
     * <code>ErrorQuestAlreadyCompleted = 702;</code>
     */
    ErrorQuestAlreadyCompleted(702),
    /**
     * <code>ErrorInvalidContractMonsterUid = 750;</code>
     */
    ErrorInvalidContractMonsterUid(750),
    /**
     * <code>ErrorBattleFriendMonsterExpired = 801;</code>
     */
    ErrorBattleFriendMonsterExpired(801),
    /**
     * <code>ErrorBattleFriendMonsterNoMoreReprMonster = 802;</code>
     */
    ErrorBattleFriendMonsterNoMoreReprMonster(802),
    /**
     * <code>ErrorBattleFriendDeleted = 803;</code>
     */
    ErrorBattleFriendDeleted(803),
    /**
     * <code>ErrorBattleAlreadyUsedBattleId = 804;</code>
     */
    ErrorBattleAlreadyUsedBattleId(804),
    /**
     * <code>ErrorClanApprentice = 849;</code>
     */
    ErrorClanApprentice(849),
    /**
     * <code>ErrorAlreadyJoinClan = 850;</code>
     */
    ErrorAlreadyJoinClan(850),
    /**
     * <code>ErrorClanNotExists = 851;</code>
     */
    ErrorClanNotExists(851),
    /**
     * <code>ErrorInvalidClanName = 852;</code>
     */
    ErrorInvalidClanName(852),
    /**
     * <code>ErrorInvalidClanDesc = 853;</code>
     */
    ErrorInvalidClanDesc(853),
    /**
     * <code>ErrorAlreadyExistClanName = 854;</code>
     */
    ErrorAlreadyExistClanName(854),
    /**
     * <code>ErrorAlreadyApplyClan = 855;</code>
     */
    ErrorAlreadyApplyClan(855),
    /**
     * <code>ErrorTodayAlreadyApplyClan = 856;</code>
     */
    ErrorTodayAlreadyApplyClan(856),
    /**
     * <code>ErrorMaxClanApply = 857;</code>
     */
    ErrorMaxClanApply(857),
    /**
     * <code>ErrorNotClanMember = 858;</code>
     */
    ErrorNotClanMember(858),
    /**
     * <code>ErrorNotClanManager = 859;</code>
     */
    ErrorNotClanManager(859),
    /**
     * <code>ErrorNotClanMaster = 860;</code>
     */
    ErrorNotClanMaster(860),
    /**
     * <code>ErrorClanJoinApplyNotExists = 861;</code>
     */
    ErrorClanJoinApplyNotExists(861),
    /**
     * <code>ErrorAlreadyCanceledApply = 862;</code>
     */
    ErrorAlreadyCanceledApply(862),
    /**
     * <code>ErrorInvalidClanMemberGradeChange = 863;</code>
     */
    ErrorInvalidClanMemberGradeChange(863),
    /**
     * <code>ErrorMaxClanMember = 864;</code>
     */
    ErrorMaxClanMember(864),
    /**
     * <code>ErrorClanMasterUnreg = 865;</code>
     */
    ErrorClanMasterUnreg(865),
    /**
     * <code>ErrorClanNameNotExists = 866;</code>
     */
    ErrorClanNameNotExists(866),
    /**
     * <code>ErrorClanSeasonNotOpenTime = 867;</code>
     */
    ErrorClanSeasonNotOpenTime(867),
    /**
     * <code>ErrorAlreadyJoinClanSeason = 868;</code>
     */
    ErrorAlreadyJoinClanSeason(868),
    /**
     * <code>ErrorMaxClanViceMaster = 869;</code>
     */
    ErrorMaxClanViceMaster(869),
    /**
     * <code>ErrorInvalidChangeClanMemberGrade = 870;</code>
     */
    ErrorInvalidChangeClanMemberGrade(870),
    /**
     * <code>ErrorNotFineClanMember = 871;</code>
     */
    ErrorNotFineClanMember(871),
    /**
     * <code>ErrorClanGradeBeyondPower = 872;</code>
     */
    ErrorClanGradeBeyondPower(872),
    /**
     * <code>ErrorDestroyClanExistMember = 873;</code>
     */
    ErrorDestroyClanExistMember(873),
    /**
     * <code>ErrorKickClanMyself = 874;</code>
     */
    ErrorKickClanMyself(874),
    /**
     * <code>ErrorNotClanViceMaster = 875;</code>
     */
    ErrorNotClanViceMaster(875),
    /**
     * <code>ErrorInvalidClanChattingNoticeLenth = 876;</code>
     */
    ErrorInvalidClanChattingNoticeLenth(876),
    /**
     * <code>ErrorInvalidClanChattingNotice = 877;</code>
     */
    ErrorInvalidClanChattingNotice(877),
    /**
     * <code>ErrorInvalidClanCommentLenth = 878;</code>
     */
    ErrorInvalidClanCommentLenth(878),
    /**
     * <code>ErrorInvalidClanComment = 879;</code>
     */
    ErrorInvalidClanComment(879),
    /**
     * <code>ErrorInvalidClanDescLenth = 880;</code>
     */
    ErrorInvalidClanDescLenth(880),
    /**
     * <code>ErrorNotChangeClanData = 881;</code>
     */
    ErrorNotChangeClanData(881),
    /**
     * <code>ErrorNotClanOpenConditon = 882;</code>
     */
    ErrorNotClanOpenConditon(882),
    /**
     * <code>ErrorInvalidClanSeason = 883;</code>
     */
    ErrorInvalidClanSeason(883),
    /**
     * <code>ErrorInvalidClanPhase = 884;</code>
     */
    ErrorInvalidClanPhase(884),
    /**
     * <code>ErrorInvalidClanBattleCnt = 885;</code>
     */
    ErrorInvalidClanBattleCnt(885),
    /**
     * <code>ErrorClanBossAlreadyDead = 886;</code>
     */
    ErrorClanBossAlreadyDead(886),
    /**
     * <code>ErrorTodayLeaveClan = 887;</code>
     */
    ErrorTodayLeaveClan(887),
    /**
     * <code>ErrorNotEnoughMemberApplyClanWar = 888;</code>
     */
    ErrorNotEnoughMemberApplyClanWar(888),
    /**
     * <code>ErrorApplyClanWarOnPhase = 889;</code>
     */
    ErrorApplyClanWarOnPhase(889),
    /**
     * <code>ErrorSanctionedClanMember = 890;</code>
     */
    ErrorSanctionedClanMember(890),
    /**
     * <code>ErrorAcceptClanApplyOnPhase = 891;</code>
     */
    ErrorAcceptClanApplyOnPhase(891),
    /**
     * <code>ErrorPickSameStage = 892;</code>
     */
    ErrorPickSameStage(892),
    /**
     * <code>ErrorClanMemberCountInsufficient = 893;</code>
     */
    ErrorClanMemberCountInsufficient(893),
    /**
     * <code>ErrorMaxApprenticeMember = 894;</code>
     */
    ErrorMaxApprenticeMember(894),
    /**
     * <code>ErrorSendMaxScoutApply = 895;</code>
     */
    ErrorSendMaxScoutApply(895),
    /**
     * <code>ErrorReceiveMaxScoutApply = 896;</code>
     */
    ErrorReceiveMaxScoutApply(896),
    /**
     * <code>ErrorInvalidCountryForScout = 897;</code>
     */
    ErrorInvalidCountryForScout(897),
    /**
     * <code>ErrorInvalidApplyClanMemberGrade = 898;</code>
     */
    ErrorInvalidApplyClanMemberGrade(898),
    /**
     * <code>ErrorBattleSimulateInvalid = 899;</code>
     */
    ErrorBattleSimulateInvalid(899),
    /**
     * <code>ErrorNoticeRestrictInServiceCheck = 900;</code>
     */
    ErrorNoticeRestrictInServiceCheck(900),
    /**
     * <code>ErrorInvalidClanApprenticeTimeCondition = 901;</code>
     */
    ErrorInvalidClanApprenticeTimeCondition(901),
    /**
     * <code>ErrorClanUserScoutNotExists = 902;</code>
     */
    ErrorClanUserScoutNotExists(902),
    /**
     * <code>ErrorAlreadyScoutUser = 903;</code>
     */
    ErrorAlreadyScoutUser(903),
    /**
     * <code>ErrorTodayAlreadyScoutUser = 904;</code>
     */
    ErrorTodayAlreadyScoutUser(904),
    /**
     * <code>ErrorAlreadyClanAttend = 905;</code>
     */
    ErrorAlreadyClanAttend(905),
    /**
     * <code>ErrorAlreadyReceivedClanJoinRequest = 906;</code>
     */
    ErrorAlreadyReceivedClanJoinRequest(906),
    /**
     * <code>ErrorNotClearCVCApplyCondition = 907;</code>
     */
    ErrorNotClearCVCApplyCondition(907),
    /**
     * <code>ErrorNotClearCVCApplyMemberCondition = 908;</code>
     */
    ErrorNotClearCVCApplyMemberCondition(908),
    /**
     * <code>ErrorDisableApplyCVCTime = 909;</code>
     */
    ErrorDisableApplyCVCTime(909),
    /**
     * <code>ErrorAlreadyApplyCVC = 910;</code>
     */
    ErrorAlreadyApplyCVC(910),
    /**
     * <code>ErrorNotApplyCVC = 911;</code>
     */
    ErrorNotApplyCVC(911),
    /**
     * <code>ErrorCVCMemberNotLeaveClan = 912;</code>
     */
    ErrorCVCMemberNotLeaveClan(912),
    /**
     * <code>ErrorInvalidCVCMonsterDefenceSlot = 913;</code>
     */
    ErrorInvalidCVCMonsterDefenceSlot(913),
    /**
     * <code>ErrorCannotChangeCVCMonsterSlotOnPhase = 914;</code>
     */
    ErrorCannotChangeCVCMonsterSlotOnPhase(914),
    /**
     * <code>ErrorCVCMemberBattleIsNotFinished = 915;</code>
     */
    ErrorCVCMemberBattleIsNotFinished(915),
    /**
     * <code>ErrorNotCVCMatching = 916;</code>
     */
    ErrorNotCVCMatching(916),
    /**
     * <code>ErrorInvalidCVCEnemyMemberId = 917;</code>
     */
    ErrorInvalidCVCEnemyMemberId(917),
    /**
     * <code>ErrorNotEnoughCVCMemberBattleCount = 918;</code>
     */
    ErrorNotEnoughCVCMemberBattleCount(918),
    /**
     * <code>ErrorNotExistCVCMonsterSlot = 919;</code>
     */
    ErrorNotExistCVCMonsterSlot(919),
    /**
     * <code>ErrorDestroyClanJoinCVC = 920;</code>
     */
    ErrorDestroyClanJoinCVC(920),
    /**
     * <code>ErrorPromisePackageAlready = 921;</code>
     */
    ErrorPromisePackageAlready(921),
    /**
     * <code>ErrorInvalidPromisePackage = 922;</code>
     */
    ErrorInvalidPromisePackage(922),
    /**
     * <code>ErrorNotCVCMember = 923;</code>
     */
    ErrorNotCVCMember(923),
    /**
     * <code>ErrorUserMonsterOnCVCDefense = 924;</code>
     */
    ErrorUserMonsterOnCVCDefense(924),
    /**
     * <code>ErrorEnemyCVCEnergyIsZero = 925;</code>
     */
    ErrorEnemyCVCEnergyIsZero(925),
    /**
     * <code>ErrorCVCPhaseEnd = 926;</code>
     */
    ErrorCVCPhaseEnd(926),
    /**
     * <code>ErrorSuperStoneStuffsInsufficient = 927;</code>
     */
    ErrorSuperStoneStuffsInsufficient(927),
    /**
     * <code>ErrorSuperStoneAlreadyMax = 928;</code>
     */
    ErrorSuperStoneAlreadyMax(928),
    /**
     * <code>ErrorSuperStoneStuffsAlreadyMax = 929;</code>
     */
    ErrorSuperStoneStuffsAlreadyMax(929),
    /**
     * <code>ErrorCombiningSuperStoneNotFinished = 930;</code>
     */
    ErrorCombiningSuperStoneNotFinished(930),
    /**
     * <code>ErrorNotExistCombiningSuperStone = 931;</code>
     */
    ErrorNotExistCombiningSuperStone(931),
    /**
     * <code>ErrorInvalidMonsterForSuperEvolution = 932;</code>
     */
    ErrorInvalidMonsterForSuperEvolution(932),
    /**
     * <code>ErrorSuperStoneInsufficient = 933;</code>
     */
    ErrorSuperStoneInsufficient(933),
    /**
     * <code>ErrorInvalidCVCJoinMemberCount = 940;</code>
     */
    ErrorInvalidCVCJoinMemberCount(940),
    /**
     * <code>ErrorRenewBeforeSeason = 941;</code>
     */
    ErrorRenewBeforeSeason(941),
    /**
     * <code>ErrorNotMonthlyMonsterSeason = 942;</code>
     */
    ErrorNotMonthlyMonsterSeason(942),
    /**
     * <code>ErrorMonthlyMonsterSeasonChange = 943;</code>
     */
    ErrorMonthlyMonsterSeasonChange(943),
    /**
     * <code>ErrorInvalidBanhaoUserID = 990;</code>
     */
    ErrorInvalidBanhaoUserID(990),
    /**
     * <code>ErrorInvalidBanhaoUserPW = 991;</code>
     */
    ErrorInvalidBanhaoUserPW(991),
    /**
     * <code>ErrorForceFinishTransaction = 999;</code>
     */
    ErrorForceFinishTransaction(999),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ResultOk = 0;</code>
     */
    public static final int ResultOk_VALUE = 0;
    /**
     * <code>ErrorUnknown = 1;</code>
     */
    public static final int ErrorUnknown_VALUE = 1;
    /**
     * <code>ErrorInvalidProtocolVersion = 2;</code>
     */
    public static final int ErrorInvalidProtocolVersion_VALUE = 2;
    /**
     * <code>ErrorCountLimit = 10;</code>
     */
    public static final int ErrorCountLimit_VALUE = 10;
    /**
     * <code>ErrorTimeLimit = 11;</code>
     */
    public static final int ErrorTimeLimit_VALUE = 11;
    /**
     * <code>ErrorInternalServerError = 50;</code>
     */
    public static final int ErrorInternalServerError_VALUE = 50;
    /**
     * <code>ErrorDataInvalid = 60;</code>
     */
    public static final int ErrorDataInvalid_VALUE = 60;
    /**
     * <code>ErrorUserNameAlreadyExists = 61;</code>
     */
    public static final int ErrorUserNameAlreadyExists_VALUE = 61;
    /**
     * <code>ErrorUserNameInvalid = 62;</code>
     */
    public static final int ErrorUserNameInvalid_VALUE = 62;
    /**
     * <code>ErrorUserNotRegistered = 63;</code>
     */
    public static final int ErrorUserNotRegistered_VALUE = 63;
    /**
     * <code>ErrorUserAlreadyRegistered = 64;</code>
     */
    public static final int ErrorUserAlreadyRegistered_VALUE = 64;
    /**
     * <code>ErrorUserNameForbidden = 65;</code>
     */
    public static final int ErrorUserNameForbidden_VALUE = 65;
    /**
     * <code>ErrorUserNameRestrictLength = 66;</code>
     */
    public static final int ErrorUserNameRestrictLength_VALUE = 66;
    /**
     * <code>ErrorUserDuplicatedLogin = 67;</code>
     */
    public static final int ErrorUserDuplicatedLogin_VALUE = 67;
    /**
     * <code>ErrorPlatformTypeNotFind = 68;</code>
     */
    public static final int ErrorPlatformTypeNotFind_VALUE = 68;
    /**
     * <code>ErrorPlatformAccountIdNotExist = 69;</code>
     */
    public static final int ErrorPlatformAccountIdNotExist_VALUE = 69;
    /**
     * <code>ErrorAccountNotExist = 70;</code>
     */
    public static final int ErrorAccountNotExist_VALUE = 70;
    /**
     * <code>ErrorAccountWithdraw = 79;</code>
     */
    public static final int ErrorAccountWithdraw_VALUE = 79;
    /**
     * <code>ErrorAlreadyCreatedPlatformAccount = 80;</code>
     */
    public static final int ErrorAlreadyCreatedPlatformAccount_VALUE = 80;
    /**
     * <code>ErrorAbusing = 90;</code>
     */
    public static final int ErrorAbusing_VALUE = 90;
    /**
     * <code>ErrorNearAbusing = 91;</code>
     */
    public static final int ErrorNearAbusing_VALUE = 91;
    /**
     * <code>ErrorLoginOnMaintenance = 92;</code>
     */
    public static final int ErrorLoginOnMaintenance_VALUE = 92;
    /**
     * <code>ErrorUserInvalid = 100;</code>
     */
    public static final int ErrorUserInvalid_VALUE = 100;
    /**
     * <code>ErrorUserPasswordInvalid = 101;</code>
     */
    public static final int ErrorUserPasswordInvalid_VALUE = 101;
    /**
     * <code>ErrorUserTokenInvalid = 102;</code>
     */
    public static final int ErrorUserTokenInvalid_VALUE = 102;
    /**
     * <code>ErrorUserSeqNoInvalid = 103;</code>
     */
    public static final int ErrorUserSeqNoInvalid_VALUE = 103;
    /**
     * <code>ErrorUserTicketInvalid = 104;</code>
     */
    public static final int ErrorUserTicketInvalid_VALUE = 104;
    /**
     * <code>ErrorUserCacheInvalid = 105;</code>
     */
    public static final int ErrorUserCacheInvalid_VALUE = 105;
    /**
     * <code>ErrorUserSanctioned = 106;</code>
     */
    public static final int ErrorUserSanctioned_VALUE = 106;
    /**
     * <code>ErrorUserNickExists = 110;</code>
     */
    public static final int ErrorUserNickExists_VALUE = 110;
    /**
     * <code>ErrorUserNickDenied = 111;</code>
     */
    public static final int ErrorUserNickDenied_VALUE = 111;
    /**
     * <code>ErrorUserGemInsufficient = 150;</code>
     */
    public static final int ErrorUserGemInsufficient_VALUE = 150;
    /**
     * <code>ErrorUserGoldInsufficient = 151;</code>
     */
    public static final int ErrorUserGoldInsufficient_VALUE = 151;
    /**
     * <code>ErrorUserLevelInsufficient = 152;</code>
     */
    public static final int ErrorUserLevelInsufficient_VALUE = 152;
    /**
     * <code>ErrorUserArenaPointInsufficient = 153;</code>
     */
    public static final int ErrorUserArenaPointInsufficient_VALUE = 153;
    /**
     * <code>ErrorUserArenaTicketInsufficient = 154;</code>
     */
    public static final int ErrorUserArenaTicketInsufficient_VALUE = 154;
    /**
     * <code>ErrorUserDungeonPointInsufficient = 155;</code>
     */
    public static final int ErrorUserDungeonPointInsufficient_VALUE = 155;
    /**
     * <code>ErrorUserLikeTicketInsufficient = 156;</code>
     */
    public static final int ErrorUserLikeTicketInsufficient_VALUE = 156;
    /**
     * <code>ErrorUserCrystalInsufficient = 157;</code>
     */
    public static final int ErrorUserCrystalInsufficient_VALUE = 157;
    /**
     * <code>ErrorUserBeyondStoneInsufficient = 158;</code>
     */
    public static final int ErrorUserBeyondStoneInsufficient_VALUE = 158;
    /**
     * <code>ErrorUserClanPointInsufficient = 159;</code>
     */
    public static final int ErrorUserClanPointInsufficient_VALUE = 159;
    /**
     * <code>ErrorFriendRequestMe = 170;</code>
     */
    public static final int ErrorFriendRequestMe_VALUE = 170;
    /**
     * <code>ErrorFriendNotExists = 171;</code>
     */
    public static final int ErrorFriendNotExists_VALUE = 171;
    /**
     * <code>ErrorFriendsFull = 172;</code>
     */
    public static final int ErrorFriendsFull_VALUE = 172;
    /**
     * <code>ErrorFriendsBreakUpMax = 173;</code>
     */
    public static final int ErrorFriendsBreakUpMax_VALUE = 173;
    /**
     * <code>ErrorFriendsReceiverFull = 174;</code>
     */
    public static final int ErrorFriendsReceiverFull_VALUE = 174;
    /**
     * <code>ErrorFriendAlreadyRequested = 175;</code>
     */
    public static final int ErrorFriendAlreadyRequested_VALUE = 175;
    /**
     * <code>ErrorFriendAlreadyAccepted = 176;</code>
     */
    public static final int ErrorFriendAlreadyAccepted_VALUE = 176;
    /**
     * <code>ErrorFriendFindMe = 177;</code>
     */
    public static final int ErrorFriendFindMe_VALUE = 177;
    /**
     * <code>ErrorMailAlreadyAccepted = 180;</code>
     */
    public static final int ErrorMailAlreadyAccepted_VALUE = 180;
    /**
     * <code>ErrorMailInventoryFull = 181;</code>
     */
    public static final int ErrorMailInventoryFull_VALUE = 181;
    /**
     * <code>ErrorMailBodyTooLong = 182;</code>
     */
    public static final int ErrorMailBodyTooLong_VALUE = 182;
    /**
     * <code>ErrorMailInvalid = 183;</code>
     */
    public static final int ErrorMailInvalid_VALUE = 183;
    /**
     * <code>ErrorMailNotAccepted = 184;</code>
     */
    public static final int ErrorMailNotAccepted_VALUE = 184;
    /**
     * <code>ErrorMailAlreadyDeleted = 185;</code>
     */
    public static final int ErrorMailAlreadyDeleted_VALUE = 185;
    /**
     * <code>ErrorUserMonsterNotExists = 186;</code>
     */
    public static final int ErrorUserMonsterNotExists_VALUE = 186;
    /**
     * <code>ErrorUserUnknownPayMethod = 187;</code>
     */
    public static final int ErrorUserUnknownPayMethod_VALUE = 187;
    /**
     * <code>ErrorUserMonsterSummonableCountZero = 188;</code>
     */
    public static final int ErrorUserMonsterSummonableCountZero_VALUE = 188;
    /**
     * <code>ErrorUserMonsterNotEnoughLev = 189;</code>
     */
    public static final int ErrorUserMonsterNotEnoughLev_VALUE = 189;
    /**
     * <code>ErrorUserMonsterNotEnoughEvolution = 190;</code>
     */
    public static final int ErrorUserMonsterNotEnoughEvolution_VALUE = 190;
    /**
     * <code>ErrorUserMonsterAlreadyMaxLevel = 191;</code>
     */
    public static final int ErrorUserMonsterAlreadyMaxLevel_VALUE = 191;
    /**
     * <code>ErrorUserMonsterNotEnoughBeyondStone = 192;</code>
     */
    public static final int ErrorUserMonsterNotEnoughBeyondStone_VALUE = 192;
    /**
     * <code>ErrorUserMonsterNotEnoughSoulstone = 193;</code>
     */
    public static final int ErrorUserMonsterNotEnoughSoulstone_VALUE = 193;
    /**
     * <code>ErrorUserMonsterAlreadyMaxEvolution = 194;</code>
     */
    public static final int ErrorUserMonsterAlreadyMaxEvolution_VALUE = 194;
    /**
     * <code>ErrorUserMonsterNotEnoughBornGrade = 195;</code>
     */
    public static final int ErrorUserMonsterNotEnoughBornGrade_VALUE = 195;
    /**
     * <code>ErrorUserMonsterAlreadySpecial = 196;</code>
     */
    public static final int ErrorUserMonsterAlreadySpecial_VALUE = 196;
    /**
     * <code>ErrorUserMonsterIncongruity = 197;</code>
     */
    public static final int ErrorUserMonsterIncongruity_VALUE = 197;
    /**
     * <code>ErrorUserMonsterExceed = 198;</code>
     */
    public static final int ErrorUserMonsterExceed_VALUE = 198;
    /**
     * <code>ErrorUserMonsterFullyWarmUp = 199;</code>
     */
    public static final int ErrorUserMonsterFullyWarmUp_VALUE = 199;
    /**
     * <code>ErrorUserEnergyInsufficient = 200;</code>
     */
    public static final int ErrorUserEnergyInsufficient_VALUE = 200;
    /**
     * <code>ErrorUserEnergyAlreadyMax = 201;</code>
     */
    public static final int ErrorUserEnergyAlreadyMax_VALUE = 201;
    /**
     * <code>ErrorUserArenaAlreadyMax = 202;</code>
     */
    public static final int ErrorUserArenaAlreadyMax_VALUE = 202;
    /**
     * <code>ErrorShopMetaGunAlreadyMax = 203;</code>
     */
    public static final int ErrorShopMetaGunAlreadyMax_VALUE = 203;
    /**
     * <code>ErrorShopMetaBulletAlreadyMax = 204;</code>
     */
    public static final int ErrorShopMetaBulletAlreadyMax_VALUE = 204;
    /**
     * <code>ErrorUserMonsterLocked = 205;</code>
     */
    public static final int ErrorUserMonsterLocked_VALUE = 205;
    /**
     * <code>ErrorUserMonsterRepresentationLocked = 206;</code>
     */
    public static final int ErrorUserMonsterRepresentationLocked_VALUE = 206;
    /**
     * <code>ErrorRuneMetaNoMileageItem = 207;</code>
     */
    public static final int ErrorRuneMetaNoMileageItem_VALUE = 207;
    /**
     * <code>RuneMetaJustUsedMileage = 208;</code>
     */
    public static final int RuneMetaJustUsedMileage_VALUE = 208;
    /**
     * <code>ErrorMonsterMetaNotAvailableTimestamp = 209;</code>
     */
    public static final int ErrorMonsterMetaNotAvailableTimestamp_VALUE = 209;
    /**
     * <code>ErrorMonsterSlotAlreadyFull = 210;</code>
     */
    public static final int ErrorMonsterSlotAlreadyFull_VALUE = 210;
    /**
     * <code>ErrorUserCaptureBulletNotEnough = 211;</code>
     */
    public static final int ErrorUserCaptureBulletNotEnough_VALUE = 211;
    /**
     * <code>ErrorTimeLeft = 212;</code>
     */
    public static final int ErrorTimeLeft_VALUE = 212;
    /**
     * <code>ErrorGiftNotExists = 213;</code>
     */
    public static final int ErrorGiftNotExists_VALUE = 213;
    /**
     * <code>ErrorUserDungeonTicketInsufficient = 214;</code>
     */
    public static final int ErrorUserDungeonTicketInsufficient_VALUE = 214;
    /**
     * <code>ErrorDungeonTodayIsNotOpenDay = 215;</code>
     */
    public static final int ErrorDungeonTodayIsNotOpenDay_VALUE = 215;
    /**
     * <code>ErrorUserMonsterSummonLimitExpired = 216;</code>
     */
    public static final int ErrorUserMonsterSummonLimitExpired_VALUE = 216;
    /**
     * <code>ErrorArenaDefenseHasEmptySlot = 217;</code>
     */
    public static final int ErrorArenaDefenseHasEmptySlot_VALUE = 217;
    /**
     * <code>ErrorRuneMetaNotAvailableTimestamp = 218;</code>
     */
    public static final int ErrorRuneMetaNotAvailableTimestamp_VALUE = 218;
    /**
     * <code>ErrorSupportMonsterCanNotUseToday = 219;</code>
     */
    public static final int ErrorSupportMonsterCanNotUseToday_VALUE = 219;
    /**
     * <code>ErrorSupportMonsterAlreadyUsed = 220;</code>
     */
    public static final int ErrorSupportMonsterAlreadyUsed_VALUE = 220;
    /**
     * <code>ErrorNotEnoughSentCount = 221;</code>
     */
    public static final int ErrorNotEnoughSentCount_VALUE = 221;
    /**
     * <code>ErrorArenaCandidatesIsNotAllClear = 222;</code>
     */
    public static final int ErrorArenaCandidatesIsNotAllClear_VALUE = 222;
    /**
     * <code>ErrorSupportMonsterCanNotUseExcludeStory = 223;</code>
     */
    public static final int ErrorSupportMonsterCanNotUseExcludeStory_VALUE = 223;
    /**
     * <code>ErrorArenaRankServerNoResponse = 224;</code>
     */
    public static final int ErrorArenaRankServerNoResponse_VALUE = 224;
    /**
     * <code>ErrorRankingInReset = 225;</code>
     */
    public static final int ErrorRankingInReset_VALUE = 225;
    /**
     * <code>ErrorIAPReceiptCheckInvalid = 226;</code>
     */
    public static final int ErrorIAPReceiptCheckInvalid_VALUE = 226;
    /**
     * <code>ErrorIAPReceiptCheckFail = 227;</code>
     */
    public static final int ErrorIAPReceiptCheckFail_VALUE = 227;
    /**
     * <code>ErrorLobbyRewardAlreadyRecved = 228;</code>
     */
    public static final int ErrorLobbyRewardAlreadyRecved_VALUE = 228;
    /**
     * <code>ErrorLobbyRewardTimeExceed = 229;</code>
     */
    public static final int ErrorLobbyRewardTimeExceed_VALUE = 229;
    /**
     * <code>ErrorLobbyRewardNotExist = 230;</code>
     */
    public static final int ErrorLobbyRewardNotExist_VALUE = 230;
    /**
     * <code>ErrorArenaEnemyInvalid = 231;</code>
     */
    public static final int ErrorArenaEnemyInvalid_VALUE = 231;
    /**
     * <code>ErrorUserMonsterOnArenaDefense = 232;</code>
     */
    public static final int ErrorUserMonsterOnArenaDefense_VALUE = 232;
    /**
     * <code>ErrorUserMonsterOnForceLocked = 233;</code>
     */
    public static final int ErrorUserMonsterOnForceLocked_VALUE = 233;
    /**
     * <code>ErrorUserMonsterMaxSoulStone = 234;</code>
     */
    public static final int ErrorUserMonsterMaxSoulStone_VALUE = 234;
    /**
     * <code>ErrorUserMonsterSummonDataError = 235;</code>
     */
    public static final int ErrorUserMonsterSummonDataError_VALUE = 235;
    /**
     * <code>ErrorUserMonsterSkillBookNotExistOrCountIsZero = 236;</code>
     */
    public static final int ErrorUserMonsterSkillBookNotExistOrCountIsZero_VALUE = 236;
    /**
     * <code>ErrorMonsterNotUseSkillLevel = 237;</code>
     */
    public static final int ErrorMonsterNotUseSkillLevel_VALUE = 237;
    /**
     * <code>ErrorSkillBookIsNotMatchedToUserMonster = 238;</code>
     */
    public static final int ErrorSkillBookIsNotMatchedToUserMonster_VALUE = 238;
    /**
     * <code>ErrorUserMonsterSkillFullyUpgraded = 239;</code>
     */
    public static final int ErrorUserMonsterSkillFullyUpgraded_VALUE = 239;
    /**
     * <code>ErrorUserMonsterNotEnoughGradeToUpgradeSkill = 240;</code>
     */
    public static final int ErrorUserMonsterNotEnoughGradeToUpgradeSkill_VALUE = 240;
    /**
     * <code>ErrorDungeonOpenConditionNeedUserLevel = 241;</code>
     */
    public static final int ErrorDungeonOpenConditionNeedUserLevel_VALUE = 241;
    /**
     * <code>ErrorDungeonOpenConditionNotClearedSubStage = 242;</code>
     */
    public static final int ErrorDungeonOpenConditionNotClearedSubStage_VALUE = 242;
    /**
     * <code>ErrorUserRuneNotExist = 300;</code>
     */
    public static final int ErrorUserRuneNotExist_VALUE = 300;
    /**
     * <code>ErrorUserRuneAlreadyMaxLevel = 301;</code>
     */
    public static final int ErrorUserRuneAlreadyMaxLevel_VALUE = 301;
    /**
     * <code>ErrorRuneInvenExceed = 302;</code>
     */
    public static final int ErrorRuneInvenExceed_VALUE = 302;
    /**
     * <code>ErrorUserMonsterLeaderSkillGradeLower = 303;</code>
     */
    public static final int ErrorUserMonsterLeaderSkillGradeLower_VALUE = 303;
    /**
     * <code>ErrorUserRuneIsLocked = 304;</code>
     */
    public static final int ErrorUserRuneIsLocked_VALUE = 304;
    /**
     * <code>ErrorAlreadyStoredUserMonster = 305;</code>
     */
    public static final int ErrorAlreadyStoredUserMonster_VALUE = 305;
    /**
     * <code>ErrorUserMonsterIsLocked = 306;</code>
     */
    public static final int ErrorUserMonsterIsLocked_VALUE = 306;
    /**
     * <code>ErrorExceedUserMonsterStore = 307;</code>
     */
    public static final int ErrorExceedUserMonsterStore_VALUE = 307;
    /**
     * <code>ErrorMonsterStorageAlreadyMax = 308;</code>
     */
    public static final int ErrorMonsterStorageAlreadyMax_VALUE = 308;
    /**
     * <code>ErrorMonsterStorageInvalid = 309;</code>
     */
    public static final int ErrorMonsterStorageInvalid_VALUE = 309;
    /**
     * <code>ErrorUserRuneNotMatchedShape = 310;</code>
     */
    public static final int ErrorUserRuneNotMatchedShape_VALUE = 310;
    /**
     * <code>ErrorColossusDungeonMonsterCountInvalid = 350;</code>
     */
    public static final int ErrorColossusDungeonMonsterCountInvalid_VALUE = 350;
    /**
     * <code>ErrorUseSameRootMonster = 351;</code>
     */
    public static final int ErrorUseSameRootMonster_VALUE = 351;
    /**
     * <code>ErrorMaxSpecialGuradianDungeonClearCount = 360;</code>
     */
    public static final int ErrorMaxSpecialGuradianDungeonClearCount_VALUE = 360;
    /**
     * <code>ErrorMonsterInvenAlreadyMax = 400;</code>
     */
    public static final int ErrorMonsterInvenAlreadyMax_VALUE = 400;
    /**
     * <code>ErrorMonsterInvenInvalidPrice = 401;</code>
     */
    public static final int ErrorMonsterInvenInvalidPrice_VALUE = 401;
    /**
     * <code>ErrorMonsterInvenExceed = 402;</code>
     */
    public static final int ErrorMonsterInvenExceed_VALUE = 402;
    /**
     * <code>ErrorBingoInsufficientForReward = 404;</code>
     */
    public static final int ErrorBingoInsufficientForReward_VALUE = 404;
    /**
     * <code>ErrorBingoInvalidRequest = 405;</code>
     */
    public static final int ErrorBingoInvalidRequest_VALUE = 405;
    /**
     * <code>ErrorBingoDataNotExist = 406;</code>
     */
    public static final int ErrorBingoDataNotExist_VALUE = 406;
    /**
     * <code>ErrorCaptureFestivalNotExist = 450;</code>
     */
    public static final int ErrorCaptureFestivalNotExist_VALUE = 450;
    /**
     * <code>ErrorUserCaptureFestivalNotExist = 451;</code>
     */
    public static final int ErrorUserCaptureFestivalNotExist_VALUE = 451;
    /**
     * <code>ErrorInvalidCaptureFestivalSeason = 452;</code>
     */
    public static final int ErrorInvalidCaptureFestivalSeason_VALUE = 452;
    /**
     * <code>ErrorInvalidCaptureFestivalFinaleSeason = 453;</code>
     */
    public static final int ErrorInvalidCaptureFestivalFinaleSeason_VALUE = 453;
    /**
     * <code>ErrorLuckyTicketInsufficient = 454;</code>
     */
    public static final int ErrorLuckyTicketInsufficient_VALUE = 454;
    /**
     * <code>ErrorMaxLuckyTicket = 455;</code>
     */
    public static final int ErrorMaxLuckyTicket_VALUE = 455;
    /**
     * <code>ErrorLogRefreshCaptureFestivalNotExist = 456;</code>
     */
    public static final int ErrorLogRefreshCaptureFestivalNotExist_VALUE = 456;
    /**
     * <code>ErrorAlreadyGetRankReward = 457;</code>
     */
    public static final int ErrorAlreadyGetRankReward_VALUE = 457;
    /**
     * <code>ErrorAlreadyGetBonusLuckyTicket = 458;</code>
     */
    public static final int ErrorAlreadyGetBonusLuckyTicket_VALUE = 458;
    /**
     * <code>ErrorBonusLuckyTicketIsGone = 459;</code>
     */
    public static final int ErrorBonusLuckyTicketIsGone_VALUE = 459;
    /**
     * <code>ErrorShopStockInvalid = 500;</code>
     */
    public static final int ErrorShopStockInvalid_VALUE = 500;
    /**
     * <code>ErrorItemCountInsufficient = 501;</code>
     */
    public static final int ErrorItemCountInsufficient_VALUE = 501;
    /**
     * <code>ErrorItemInvalid = 502;</code>
     */
    public static final int ErrorItemInvalid_VALUE = 502;
    /**
     * <code>ErrorItemRetainExceed = 503;</code>
     */
    public static final int ErrorItemRetainExceed_VALUE = 503;
    /**
     * <code>ErrorBeyondStoneRetainExceed = 504;</code>
     */
    public static final int ErrorBeyondStoneRetainExceed_VALUE = 504;
    /**
     * <code>ErrorUserItemNotExist = 505;</code>
     */
    public static final int ErrorUserItemNotExist_VALUE = 505;
    /**
     * <code>ErrorPurchase = 550;</code>
     */
    public static final int ErrorPurchase_VALUE = 550;
    /**
     * <code>ErrorInvalidPurchaseItem = 551;</code>
     */
    public static final int ErrorInvalidPurchaseItem_VALUE = 551;
    /**
     * <code>ErrorInvalidPurchaseId = 552;</code>
     */
    public static final int ErrorInvalidPurchaseId_VALUE = 552;
    /**
     * <code>ErrorInvalidPurchaseData = 553;</code>
     */
    public static final int ErrorInvalidPurchaseData_VALUE = 553;
    /**
     * <code>ErrorAlreadyCompletePurchase = 554;</code>
     */
    public static final int ErrorAlreadyCompletePurchase_VALUE = 554;
    /**
     * <code>ErrorAlreadyPurchasePackage = 555;</code>
     */
    public static final int ErrorAlreadyPurchasePackage_VALUE = 555;
    /**
     * <code>ErrorClosedPackageItem = 556;</code>
     */
    public static final int ErrorClosedPackageItem_VALUE = 556;
    /**
     * <code>ErrorInvalidPackageItem = 557;</code>
     */
    public static final int ErrorInvalidPackageItem_VALUE = 557;
    /**
     * <code>ErrorInvalidPackageRewardIndex = 558;</code>
     */
    public static final int ErrorInvalidPackageRewardIndex_VALUE = 558;
    /**
     * <code>ErrorAlreadyReceivePackageReward = 559;</code>
     */
    public static final int ErrorAlreadyReceivePackageReward_VALUE = 559;
    /**
     * <code>ErrorAlreadyCompletePackage = 560;</code>
     */
    public static final int ErrorAlreadyCompletePackage_VALUE = 560;
    /**
     * <code>ErrorInvalidPackageQuest = 561;</code>
     */
    public static final int ErrorInvalidPackageQuest_VALUE = 561;
    /**
     * <code>ErrorExpiredJojeShopItem = 562;</code>
     */
    public static final int ErrorExpiredJojeShopItem_VALUE = 562;
    /**
     * <code>ErrorDuplicatedOrderID = 563;</code>
     */
    public static final int ErrorDuplicatedOrderID_VALUE = 563;
    /**
     * <code>ErrorInvalidPackagePurchaseBonus = 564;</code>
     */
    public static final int ErrorInvalidPackagePurchaseBonus_VALUE = 564;
    /**
     * <code>ErrorNotAvailableProductId = 565;</code>
     */
    public static final int ErrorNotAvailableProductId_VALUE = 565;
    /**
     * <code>ErrorClosedShopItem = 566;</code>
     */
    public static final int ErrorClosedShopItem_VALUE = 566;
    /**
     * <code>ErrorAlreadyPurchaseFestivalTicket = 567;</code>
     */
    public static final int ErrorAlreadyPurchaseFestivalTicket_VALUE = 567;
    /**
     * <code>ErrorNotAvailableHeroFestival = 568;</code>
     */
    public static final int ErrorNotAvailableHeroFestival_VALUE = 568;
    /**
     * <code>ErrorUserFestivalTicketInsufficient = 569;</code>
     */
    public static final int ErrorUserFestivalTicketInsufficient_VALUE = 569;
    /**
     * <code>ErrorNotAvailableTicketSalesDate = 570;</code>
     */
    public static final int ErrorNotAvailableTicketSalesDate_VALUE = 570;
    /**
     * <code>ErrorExceedUserSkillBook = 571;</code>
     */
    public static final int ErrorExceedUserSkillBook_VALUE = 571;
    /**
     * <code>ErrorNotInClanFestival = 572;</code>
     */
    public static final int ErrorNotInClanFestival_VALUE = 572;
    /**
     * <code>ErrorInvalidClanFestivalGift = 573;</code>
     */
    public static final int ErrorInvalidClanFestivalGift_VALUE = 573;
    /**
     * <code>ErrorHeroEssenceInsufficient = 574;</code>
     */
    public static final int ErrorHeroEssenceInsufficient_VALUE = 574;
    /**
     * <code>ErrorGetMaxClanFestivalReward = 575;</code>
     */
    public static final int ErrorGetMaxClanFestivalReward_VALUE = 575;
    /**
     * <code>ErrorInvalidBoosterPackage = 576;</code>
     */
    public static final int ErrorInvalidBoosterPackage_VALUE = 576;
    /**
     * <code>ErrorPurchaseDuplicatedPackage = 600;</code>
     */
    public static final int ErrorPurchaseDuplicatedPackage_VALUE = 600;
    /**
     * <code>ErrorPurchaseAppleServerError = 601;</code>
     */
    public static final int ErrorPurchaseAppleServerError_VALUE = 601;
    /**
     * <code>ErrorReservedCode3 = 602;</code>
     */
    public static final int ErrorReservedCode3_VALUE = 602;
    /**
     * <code>ErrorReservedCode4 = 603;</code>
     */
    public static final int ErrorReservedCode4_VALUE = 603;
    /**
     * <code>ErrorReservedCode5 = 604;</code>
     */
    public static final int ErrorReservedCode5_VALUE = 604;
    /**
     * <code>ErrorItemBundleMaxPurchase = 650;</code>
     */
    public static final int ErrorItemBundleMaxPurchase_VALUE = 650;
    /**
     * <code>ErrorItemBundleNotSalePeriod = 651;</code>
     */
    public static final int ErrorItemBundleNotSalePeriod_VALUE = 651;
    /**
     * <code>ErrorInvalidItemBundleReward = 652;</code>
     */
    public static final int ErrorInvalidItemBundleReward_VALUE = 652;
    /**
     * <code>ErrorInvalidItemBundle = 653;</code>
     */
    public static final int ErrorInvalidItemBundle_VALUE = 653;
    /**
     * <code>ErrorAlreadyPurchaseLobbyShip = 660;</code>
     */
    public static final int ErrorAlreadyPurchaseLobbyShip_VALUE = 660;
    /**
     * <code>ErrorUserShipExpired = 661;</code>
     */
    public static final int ErrorUserShipExpired_VALUE = 661;
    /**
     * <code>ErrorInvalidUserShip = 662;</code>
     */
    public static final int ErrorInvalidUserShip_VALUE = 662;
    /**
     * <code>ErrorUserShipNotUpdated = 663;</code>
     */
    public static final int ErrorUserShipNotUpdated_VALUE = 663;
    /**
     * <code>ErrorExistUnexpiredUserShip = 664;</code>
     */
    public static final int ErrorExistUnexpiredUserShip_VALUE = 664;
    /**
     * <code>ErrorQuestNotFound = 700;</code>
     */
    public static final int ErrorQuestNotFound_VALUE = 700;
    /**
     * <code>ErrorQuestIncomplete = 701;</code>
     */
    public static final int ErrorQuestIncomplete_VALUE = 701;
    /**
     * <code>ErrorQuestAlreadyCompleted = 702;</code>
     */
    public static final int ErrorQuestAlreadyCompleted_VALUE = 702;
    /**
     * <code>ErrorInvalidContractMonsterUid = 750;</code>
     */
    public static final int ErrorInvalidContractMonsterUid_VALUE = 750;
    /**
     * <code>ErrorBattleFriendMonsterExpired = 801;</code>
     */
    public static final int ErrorBattleFriendMonsterExpired_VALUE = 801;
    /**
     * <code>ErrorBattleFriendMonsterNoMoreReprMonster = 802;</code>
     */
    public static final int ErrorBattleFriendMonsterNoMoreReprMonster_VALUE = 802;
    /**
     * <code>ErrorBattleFriendDeleted = 803;</code>
     */
    public static final int ErrorBattleFriendDeleted_VALUE = 803;
    /**
     * <code>ErrorBattleAlreadyUsedBattleId = 804;</code>
     */
    public static final int ErrorBattleAlreadyUsedBattleId_VALUE = 804;
    /**
     * <code>ErrorClanApprentice = 849;</code>
     */
    public static final int ErrorClanApprentice_VALUE = 849;
    /**
     * <code>ErrorAlreadyJoinClan = 850;</code>
     */
    public static final int ErrorAlreadyJoinClan_VALUE = 850;
    /**
     * <code>ErrorClanNotExists = 851;</code>
     */
    public static final int ErrorClanNotExists_VALUE = 851;
    /**
     * <code>ErrorInvalidClanName = 852;</code>
     */
    public static final int ErrorInvalidClanName_VALUE = 852;
    /**
     * <code>ErrorInvalidClanDesc = 853;</code>
     */
    public static final int ErrorInvalidClanDesc_VALUE = 853;
    /**
     * <code>ErrorAlreadyExistClanName = 854;</code>
     */
    public static final int ErrorAlreadyExistClanName_VALUE = 854;
    /**
     * <code>ErrorAlreadyApplyClan = 855;</code>
     */
    public static final int ErrorAlreadyApplyClan_VALUE = 855;
    /**
     * <code>ErrorTodayAlreadyApplyClan = 856;</code>
     */
    public static final int ErrorTodayAlreadyApplyClan_VALUE = 856;
    /**
     * <code>ErrorMaxClanApply = 857;</code>
     */
    public static final int ErrorMaxClanApply_VALUE = 857;
    /**
     * <code>ErrorNotClanMember = 858;</code>
     */
    public static final int ErrorNotClanMember_VALUE = 858;
    /**
     * <code>ErrorNotClanManager = 859;</code>
     */
    public static final int ErrorNotClanManager_VALUE = 859;
    /**
     * <code>ErrorNotClanMaster = 860;</code>
     */
    public static final int ErrorNotClanMaster_VALUE = 860;
    /**
     * <code>ErrorClanJoinApplyNotExists = 861;</code>
     */
    public static final int ErrorClanJoinApplyNotExists_VALUE = 861;
    /**
     * <code>ErrorAlreadyCanceledApply = 862;</code>
     */
    public static final int ErrorAlreadyCanceledApply_VALUE = 862;
    /**
     * <code>ErrorInvalidClanMemberGradeChange = 863;</code>
     */
    public static final int ErrorInvalidClanMemberGradeChange_VALUE = 863;
    /**
     * <code>ErrorMaxClanMember = 864;</code>
     */
    public static final int ErrorMaxClanMember_VALUE = 864;
    /**
     * <code>ErrorClanMasterUnreg = 865;</code>
     */
    public static final int ErrorClanMasterUnreg_VALUE = 865;
    /**
     * <code>ErrorClanNameNotExists = 866;</code>
     */
    public static final int ErrorClanNameNotExists_VALUE = 866;
    /**
     * <code>ErrorClanSeasonNotOpenTime = 867;</code>
     */
    public static final int ErrorClanSeasonNotOpenTime_VALUE = 867;
    /**
     * <code>ErrorAlreadyJoinClanSeason = 868;</code>
     */
    public static final int ErrorAlreadyJoinClanSeason_VALUE = 868;
    /**
     * <code>ErrorMaxClanViceMaster = 869;</code>
     */
    public static final int ErrorMaxClanViceMaster_VALUE = 869;
    /**
     * <code>ErrorInvalidChangeClanMemberGrade = 870;</code>
     */
    public static final int ErrorInvalidChangeClanMemberGrade_VALUE = 870;
    /**
     * <code>ErrorNotFineClanMember = 871;</code>
     */
    public static final int ErrorNotFineClanMember_VALUE = 871;
    /**
     * <code>ErrorClanGradeBeyondPower = 872;</code>
     */
    public static final int ErrorClanGradeBeyondPower_VALUE = 872;
    /**
     * <code>ErrorDestroyClanExistMember = 873;</code>
     */
    public static final int ErrorDestroyClanExistMember_VALUE = 873;
    /**
     * <code>ErrorKickClanMyself = 874;</code>
     */
    public static final int ErrorKickClanMyself_VALUE = 874;
    /**
     * <code>ErrorNotClanViceMaster = 875;</code>
     */
    public static final int ErrorNotClanViceMaster_VALUE = 875;
    /**
     * <code>ErrorInvalidClanChattingNoticeLenth = 876;</code>
     */
    public static final int ErrorInvalidClanChattingNoticeLenth_VALUE = 876;
    /**
     * <code>ErrorInvalidClanChattingNotice = 877;</code>
     */
    public static final int ErrorInvalidClanChattingNotice_VALUE = 877;
    /**
     * <code>ErrorInvalidClanCommentLenth = 878;</code>
     */
    public static final int ErrorInvalidClanCommentLenth_VALUE = 878;
    /**
     * <code>ErrorInvalidClanComment = 879;</code>
     */
    public static final int ErrorInvalidClanComment_VALUE = 879;
    /**
     * <code>ErrorInvalidClanDescLenth = 880;</code>
     */
    public static final int ErrorInvalidClanDescLenth_VALUE = 880;
    /**
     * <code>ErrorNotChangeClanData = 881;</code>
     */
    public static final int ErrorNotChangeClanData_VALUE = 881;
    /**
     * <code>ErrorNotClanOpenConditon = 882;</code>
     */
    public static final int ErrorNotClanOpenConditon_VALUE = 882;
    /**
     * <code>ErrorInvalidClanSeason = 883;</code>
     */
    public static final int ErrorInvalidClanSeason_VALUE = 883;
    /**
     * <code>ErrorInvalidClanPhase = 884;</code>
     */
    public static final int ErrorInvalidClanPhase_VALUE = 884;
    /**
     * <code>ErrorInvalidClanBattleCnt = 885;</code>
     */
    public static final int ErrorInvalidClanBattleCnt_VALUE = 885;
    /**
     * <code>ErrorClanBossAlreadyDead = 886;</code>
     */
    public static final int ErrorClanBossAlreadyDead_VALUE = 886;
    /**
     * <code>ErrorTodayLeaveClan = 887;</code>
     */
    public static final int ErrorTodayLeaveClan_VALUE = 887;
    /**
     * <code>ErrorNotEnoughMemberApplyClanWar = 888;</code>
     */
    public static final int ErrorNotEnoughMemberApplyClanWar_VALUE = 888;
    /**
     * <code>ErrorApplyClanWarOnPhase = 889;</code>
     */
    public static final int ErrorApplyClanWarOnPhase_VALUE = 889;
    /**
     * <code>ErrorSanctionedClanMember = 890;</code>
     */
    public static final int ErrorSanctionedClanMember_VALUE = 890;
    /**
     * <code>ErrorAcceptClanApplyOnPhase = 891;</code>
     */
    public static final int ErrorAcceptClanApplyOnPhase_VALUE = 891;
    /**
     * <code>ErrorPickSameStage = 892;</code>
     */
    public static final int ErrorPickSameStage_VALUE = 892;
    /**
     * <code>ErrorClanMemberCountInsufficient = 893;</code>
     */
    public static final int ErrorClanMemberCountInsufficient_VALUE = 893;
    /**
     * <code>ErrorMaxApprenticeMember = 894;</code>
     */
    public static final int ErrorMaxApprenticeMember_VALUE = 894;
    /**
     * <code>ErrorSendMaxScoutApply = 895;</code>
     */
    public static final int ErrorSendMaxScoutApply_VALUE = 895;
    /**
     * <code>ErrorReceiveMaxScoutApply = 896;</code>
     */
    public static final int ErrorReceiveMaxScoutApply_VALUE = 896;
    /**
     * <code>ErrorInvalidCountryForScout = 897;</code>
     */
    public static final int ErrorInvalidCountryForScout_VALUE = 897;
    /**
     * <code>ErrorInvalidApplyClanMemberGrade = 898;</code>
     */
    public static final int ErrorInvalidApplyClanMemberGrade_VALUE = 898;
    /**
     * <code>ErrorBattleSimulateInvalid = 899;</code>
     */
    public static final int ErrorBattleSimulateInvalid_VALUE = 899;
    /**
     * <code>ErrorNoticeRestrictInServiceCheck = 900;</code>
     */
    public static final int ErrorNoticeRestrictInServiceCheck_VALUE = 900;
    /**
     * <code>ErrorInvalidClanApprenticeTimeCondition = 901;</code>
     */
    public static final int ErrorInvalidClanApprenticeTimeCondition_VALUE = 901;
    /**
     * <code>ErrorClanUserScoutNotExists = 902;</code>
     */
    public static final int ErrorClanUserScoutNotExists_VALUE = 902;
    /**
     * <code>ErrorAlreadyScoutUser = 903;</code>
     */
    public static final int ErrorAlreadyScoutUser_VALUE = 903;
    /**
     * <code>ErrorTodayAlreadyScoutUser = 904;</code>
     */
    public static final int ErrorTodayAlreadyScoutUser_VALUE = 904;
    /**
     * <code>ErrorAlreadyClanAttend = 905;</code>
     */
    public static final int ErrorAlreadyClanAttend_VALUE = 905;
    /**
     * <code>ErrorAlreadyReceivedClanJoinRequest = 906;</code>
     */
    public static final int ErrorAlreadyReceivedClanJoinRequest_VALUE = 906;
    /**
     * <code>ErrorNotClearCVCApplyCondition = 907;</code>
     */
    public static final int ErrorNotClearCVCApplyCondition_VALUE = 907;
    /**
     * <code>ErrorNotClearCVCApplyMemberCondition = 908;</code>
     */
    public static final int ErrorNotClearCVCApplyMemberCondition_VALUE = 908;
    /**
     * <code>ErrorDisableApplyCVCTime = 909;</code>
     */
    public static final int ErrorDisableApplyCVCTime_VALUE = 909;
    /**
     * <code>ErrorAlreadyApplyCVC = 910;</code>
     */
    public static final int ErrorAlreadyApplyCVC_VALUE = 910;
    /**
     * <code>ErrorNotApplyCVC = 911;</code>
     */
    public static final int ErrorNotApplyCVC_VALUE = 911;
    /**
     * <code>ErrorCVCMemberNotLeaveClan = 912;</code>
     */
    public static final int ErrorCVCMemberNotLeaveClan_VALUE = 912;
    /**
     * <code>ErrorInvalidCVCMonsterDefenceSlot = 913;</code>
     */
    public static final int ErrorInvalidCVCMonsterDefenceSlot_VALUE = 913;
    /**
     * <code>ErrorCannotChangeCVCMonsterSlotOnPhase = 914;</code>
     */
    public static final int ErrorCannotChangeCVCMonsterSlotOnPhase_VALUE = 914;
    /**
     * <code>ErrorCVCMemberBattleIsNotFinished = 915;</code>
     */
    public static final int ErrorCVCMemberBattleIsNotFinished_VALUE = 915;
    /**
     * <code>ErrorNotCVCMatching = 916;</code>
     */
    public static final int ErrorNotCVCMatching_VALUE = 916;
    /**
     * <code>ErrorInvalidCVCEnemyMemberId = 917;</code>
     */
    public static final int ErrorInvalidCVCEnemyMemberId_VALUE = 917;
    /**
     * <code>ErrorNotEnoughCVCMemberBattleCount = 918;</code>
     */
    public static final int ErrorNotEnoughCVCMemberBattleCount_VALUE = 918;
    /**
     * <code>ErrorNotExistCVCMonsterSlot = 919;</code>
     */
    public static final int ErrorNotExistCVCMonsterSlot_VALUE = 919;
    /**
     * <code>ErrorDestroyClanJoinCVC = 920;</code>
     */
    public static final int ErrorDestroyClanJoinCVC_VALUE = 920;
    /**
     * <code>ErrorPromisePackageAlready = 921;</code>
     */
    public static final int ErrorPromisePackageAlready_VALUE = 921;
    /**
     * <code>ErrorInvalidPromisePackage = 922;</code>
     */
    public static final int ErrorInvalidPromisePackage_VALUE = 922;
    /**
     * <code>ErrorNotCVCMember = 923;</code>
     */
    public static final int ErrorNotCVCMember_VALUE = 923;
    /**
     * <code>ErrorUserMonsterOnCVCDefense = 924;</code>
     */
    public static final int ErrorUserMonsterOnCVCDefense_VALUE = 924;
    /**
     * <code>ErrorEnemyCVCEnergyIsZero = 925;</code>
     */
    public static final int ErrorEnemyCVCEnergyIsZero_VALUE = 925;
    /**
     * <code>ErrorCVCPhaseEnd = 926;</code>
     */
    public static final int ErrorCVCPhaseEnd_VALUE = 926;
    /**
     * <code>ErrorSuperStoneStuffsInsufficient = 927;</code>
     */
    public static final int ErrorSuperStoneStuffsInsufficient_VALUE = 927;
    /**
     * <code>ErrorSuperStoneAlreadyMax = 928;</code>
     */
    public static final int ErrorSuperStoneAlreadyMax_VALUE = 928;
    /**
     * <code>ErrorSuperStoneStuffsAlreadyMax = 929;</code>
     */
    public static final int ErrorSuperStoneStuffsAlreadyMax_VALUE = 929;
    /**
     * <code>ErrorCombiningSuperStoneNotFinished = 930;</code>
     */
    public static final int ErrorCombiningSuperStoneNotFinished_VALUE = 930;
    /**
     * <code>ErrorNotExistCombiningSuperStone = 931;</code>
     */
    public static final int ErrorNotExistCombiningSuperStone_VALUE = 931;
    /**
     * <code>ErrorInvalidMonsterForSuperEvolution = 932;</code>
     */
    public static final int ErrorInvalidMonsterForSuperEvolution_VALUE = 932;
    /**
     * <code>ErrorSuperStoneInsufficient = 933;</code>
     */
    public static final int ErrorSuperStoneInsufficient_VALUE = 933;
    /**
     * <code>ErrorInvalidCVCJoinMemberCount = 940;</code>
     */
    public static final int ErrorInvalidCVCJoinMemberCount_VALUE = 940;
    /**
     * <code>ErrorRenewBeforeSeason = 941;</code>
     */
    public static final int ErrorRenewBeforeSeason_VALUE = 941;
    /**
     * <code>ErrorNotMonthlyMonsterSeason = 942;</code>
     */
    public static final int ErrorNotMonthlyMonsterSeason_VALUE = 942;
    /**
     * <code>ErrorMonthlyMonsterSeasonChange = 943;</code>
     */
    public static final int ErrorMonthlyMonsterSeasonChange_VALUE = 943;
    /**
     * <code>ErrorInvalidBanhaoUserID = 990;</code>
     */
    public static final int ErrorInvalidBanhaoUserID_VALUE = 990;
    /**
     * <code>ErrorInvalidBanhaoUserPW = 991;</code>
     */
    public static final int ErrorInvalidBanhaoUserPW_VALUE = 991;
    /**
     * <code>ErrorForceFinishTransaction = 999;</code>
     */
    public static final int ErrorForceFinishTransaction_VALUE = 999;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Result valueOf(int value) {
      return forNumber(value);
    }

    public static Result forNumber(int value) {
      switch (value) {
        case 0: return ResultOk;
        case 1: return ErrorUnknown;
        case 2: return ErrorInvalidProtocolVersion;
        case 10: return ErrorCountLimit;
        case 11: return ErrorTimeLimit;
        case 50: return ErrorInternalServerError;
        case 60: return ErrorDataInvalid;
        case 61: return ErrorUserNameAlreadyExists;
        case 62: return ErrorUserNameInvalid;
        case 63: return ErrorUserNotRegistered;
        case 64: return ErrorUserAlreadyRegistered;
        case 65: return ErrorUserNameForbidden;
        case 66: return ErrorUserNameRestrictLength;
        case 67: return ErrorUserDuplicatedLogin;
        case 68: return ErrorPlatformTypeNotFind;
        case 69: return ErrorPlatformAccountIdNotExist;
        case 70: return ErrorAccountNotExist;
        case 79: return ErrorAccountWithdraw;
        case 80: return ErrorAlreadyCreatedPlatformAccount;
        case 90: return ErrorAbusing;
        case 91: return ErrorNearAbusing;
        case 92: return ErrorLoginOnMaintenance;
        case 100: return ErrorUserInvalid;
        case 101: return ErrorUserPasswordInvalid;
        case 102: return ErrorUserTokenInvalid;
        case 103: return ErrorUserSeqNoInvalid;
        case 104: return ErrorUserTicketInvalid;
        case 105: return ErrorUserCacheInvalid;
        case 106: return ErrorUserSanctioned;
        case 110: return ErrorUserNickExists;
        case 111: return ErrorUserNickDenied;
        case 150: return ErrorUserGemInsufficient;
        case 151: return ErrorUserGoldInsufficient;
        case 152: return ErrorUserLevelInsufficient;
        case 153: return ErrorUserArenaPointInsufficient;
        case 154: return ErrorUserArenaTicketInsufficient;
        case 155: return ErrorUserDungeonPointInsufficient;
        case 156: return ErrorUserLikeTicketInsufficient;
        case 157: return ErrorUserCrystalInsufficient;
        case 158: return ErrorUserBeyondStoneInsufficient;
        case 159: return ErrorUserClanPointInsufficient;
        case 170: return ErrorFriendRequestMe;
        case 171: return ErrorFriendNotExists;
        case 172: return ErrorFriendsFull;
        case 173: return ErrorFriendsBreakUpMax;
        case 174: return ErrorFriendsReceiverFull;
        case 175: return ErrorFriendAlreadyRequested;
        case 176: return ErrorFriendAlreadyAccepted;
        case 177: return ErrorFriendFindMe;
        case 180: return ErrorMailAlreadyAccepted;
        case 181: return ErrorMailInventoryFull;
        case 182: return ErrorMailBodyTooLong;
        case 183: return ErrorMailInvalid;
        case 184: return ErrorMailNotAccepted;
        case 185: return ErrorMailAlreadyDeleted;
        case 186: return ErrorUserMonsterNotExists;
        case 187: return ErrorUserUnknownPayMethod;
        case 188: return ErrorUserMonsterSummonableCountZero;
        case 189: return ErrorUserMonsterNotEnoughLev;
        case 190: return ErrorUserMonsterNotEnoughEvolution;
        case 191: return ErrorUserMonsterAlreadyMaxLevel;
        case 192: return ErrorUserMonsterNotEnoughBeyondStone;
        case 193: return ErrorUserMonsterNotEnoughSoulstone;
        case 194: return ErrorUserMonsterAlreadyMaxEvolution;
        case 195: return ErrorUserMonsterNotEnoughBornGrade;
        case 196: return ErrorUserMonsterAlreadySpecial;
        case 197: return ErrorUserMonsterIncongruity;
        case 198: return ErrorUserMonsterExceed;
        case 199: return ErrorUserMonsterFullyWarmUp;
        case 200: return ErrorUserEnergyInsufficient;
        case 201: return ErrorUserEnergyAlreadyMax;
        case 202: return ErrorUserArenaAlreadyMax;
        case 203: return ErrorShopMetaGunAlreadyMax;
        case 204: return ErrorShopMetaBulletAlreadyMax;
        case 205: return ErrorUserMonsterLocked;
        case 206: return ErrorUserMonsterRepresentationLocked;
        case 207: return ErrorRuneMetaNoMileageItem;
        case 208: return RuneMetaJustUsedMileage;
        case 209: return ErrorMonsterMetaNotAvailableTimestamp;
        case 210: return ErrorMonsterSlotAlreadyFull;
        case 211: return ErrorUserCaptureBulletNotEnough;
        case 212: return ErrorTimeLeft;
        case 213: return ErrorGiftNotExists;
        case 214: return ErrorUserDungeonTicketInsufficient;
        case 215: return ErrorDungeonTodayIsNotOpenDay;
        case 216: return ErrorUserMonsterSummonLimitExpired;
        case 217: return ErrorArenaDefenseHasEmptySlot;
        case 218: return ErrorRuneMetaNotAvailableTimestamp;
        case 219: return ErrorSupportMonsterCanNotUseToday;
        case 220: return ErrorSupportMonsterAlreadyUsed;
        case 221: return ErrorNotEnoughSentCount;
        case 222: return ErrorArenaCandidatesIsNotAllClear;
        case 223: return ErrorSupportMonsterCanNotUseExcludeStory;
        case 224: return ErrorArenaRankServerNoResponse;
        case 225: return ErrorRankingInReset;
        case 226: return ErrorIAPReceiptCheckInvalid;
        case 227: return ErrorIAPReceiptCheckFail;
        case 228: return ErrorLobbyRewardAlreadyRecved;
        case 229: return ErrorLobbyRewardTimeExceed;
        case 230: return ErrorLobbyRewardNotExist;
        case 231: return ErrorArenaEnemyInvalid;
        case 232: return ErrorUserMonsterOnArenaDefense;
        case 233: return ErrorUserMonsterOnForceLocked;
        case 234: return ErrorUserMonsterMaxSoulStone;
        case 235: return ErrorUserMonsterSummonDataError;
        case 236: return ErrorUserMonsterSkillBookNotExistOrCountIsZero;
        case 237: return ErrorMonsterNotUseSkillLevel;
        case 238: return ErrorSkillBookIsNotMatchedToUserMonster;
        case 239: return ErrorUserMonsterSkillFullyUpgraded;
        case 240: return ErrorUserMonsterNotEnoughGradeToUpgradeSkill;
        case 241: return ErrorDungeonOpenConditionNeedUserLevel;
        case 242: return ErrorDungeonOpenConditionNotClearedSubStage;
        case 300: return ErrorUserRuneNotExist;
        case 301: return ErrorUserRuneAlreadyMaxLevel;
        case 302: return ErrorRuneInvenExceed;
        case 303: return ErrorUserMonsterLeaderSkillGradeLower;
        case 304: return ErrorUserRuneIsLocked;
        case 305: return ErrorAlreadyStoredUserMonster;
        case 306: return ErrorUserMonsterIsLocked;
        case 307: return ErrorExceedUserMonsterStore;
        case 308: return ErrorMonsterStorageAlreadyMax;
        case 309: return ErrorMonsterStorageInvalid;
        case 310: return ErrorUserRuneNotMatchedShape;
        case 350: return ErrorColossusDungeonMonsterCountInvalid;
        case 351: return ErrorUseSameRootMonster;
        case 360: return ErrorMaxSpecialGuradianDungeonClearCount;
        case 400: return ErrorMonsterInvenAlreadyMax;
        case 401: return ErrorMonsterInvenInvalidPrice;
        case 402: return ErrorMonsterInvenExceed;
        case 404: return ErrorBingoInsufficientForReward;
        case 405: return ErrorBingoInvalidRequest;
        case 406: return ErrorBingoDataNotExist;
        case 450: return ErrorCaptureFestivalNotExist;
        case 451: return ErrorUserCaptureFestivalNotExist;
        case 452: return ErrorInvalidCaptureFestivalSeason;
        case 453: return ErrorInvalidCaptureFestivalFinaleSeason;
        case 454: return ErrorLuckyTicketInsufficient;
        case 455: return ErrorMaxLuckyTicket;
        case 456: return ErrorLogRefreshCaptureFestivalNotExist;
        case 457: return ErrorAlreadyGetRankReward;
        case 458: return ErrorAlreadyGetBonusLuckyTicket;
        case 459: return ErrorBonusLuckyTicketIsGone;
        case 500: return ErrorShopStockInvalid;
        case 501: return ErrorItemCountInsufficient;
        case 502: return ErrorItemInvalid;
        case 503: return ErrorItemRetainExceed;
        case 504: return ErrorBeyondStoneRetainExceed;
        case 505: return ErrorUserItemNotExist;
        case 550: return ErrorPurchase;
        case 551: return ErrorInvalidPurchaseItem;
        case 552: return ErrorInvalidPurchaseId;
        case 553: return ErrorInvalidPurchaseData;
        case 554: return ErrorAlreadyCompletePurchase;
        case 555: return ErrorAlreadyPurchasePackage;
        case 556: return ErrorClosedPackageItem;
        case 557: return ErrorInvalidPackageItem;
        case 558: return ErrorInvalidPackageRewardIndex;
        case 559: return ErrorAlreadyReceivePackageReward;
        case 560: return ErrorAlreadyCompletePackage;
        case 561: return ErrorInvalidPackageQuest;
        case 562: return ErrorExpiredJojeShopItem;
        case 563: return ErrorDuplicatedOrderID;
        case 564: return ErrorInvalidPackagePurchaseBonus;
        case 565: return ErrorNotAvailableProductId;
        case 566: return ErrorClosedShopItem;
        case 567: return ErrorAlreadyPurchaseFestivalTicket;
        case 568: return ErrorNotAvailableHeroFestival;
        case 569: return ErrorUserFestivalTicketInsufficient;
        case 570: return ErrorNotAvailableTicketSalesDate;
        case 571: return ErrorExceedUserSkillBook;
        case 572: return ErrorNotInClanFestival;
        case 573: return ErrorInvalidClanFestivalGift;
        case 574: return ErrorHeroEssenceInsufficient;
        case 575: return ErrorGetMaxClanFestivalReward;
        case 576: return ErrorInvalidBoosterPackage;
        case 600: return ErrorPurchaseDuplicatedPackage;
        case 601: return ErrorPurchaseAppleServerError;
        case 602: return ErrorReservedCode3;
        case 603: return ErrorReservedCode4;
        case 604: return ErrorReservedCode5;
        case 650: return ErrorItemBundleMaxPurchase;
        case 651: return ErrorItemBundleNotSalePeriod;
        case 652: return ErrorInvalidItemBundleReward;
        case 653: return ErrorInvalidItemBundle;
        case 660: return ErrorAlreadyPurchaseLobbyShip;
        case 661: return ErrorUserShipExpired;
        case 662: return ErrorInvalidUserShip;
        case 663: return ErrorUserShipNotUpdated;
        case 664: return ErrorExistUnexpiredUserShip;
        case 700: return ErrorQuestNotFound;
        case 701: return ErrorQuestIncomplete;
        case 702: return ErrorQuestAlreadyCompleted;
        case 750: return ErrorInvalidContractMonsterUid;
        case 801: return ErrorBattleFriendMonsterExpired;
        case 802: return ErrorBattleFriendMonsterNoMoreReprMonster;
        case 803: return ErrorBattleFriendDeleted;
        case 804: return ErrorBattleAlreadyUsedBattleId;
        case 849: return ErrorClanApprentice;
        case 850: return ErrorAlreadyJoinClan;
        case 851: return ErrorClanNotExists;
        case 852: return ErrorInvalidClanName;
        case 853: return ErrorInvalidClanDesc;
        case 854: return ErrorAlreadyExistClanName;
        case 855: return ErrorAlreadyApplyClan;
        case 856: return ErrorTodayAlreadyApplyClan;
        case 857: return ErrorMaxClanApply;
        case 858: return ErrorNotClanMember;
        case 859: return ErrorNotClanManager;
        case 860: return ErrorNotClanMaster;
        case 861: return ErrorClanJoinApplyNotExists;
        case 862: return ErrorAlreadyCanceledApply;
        case 863: return ErrorInvalidClanMemberGradeChange;
        case 864: return ErrorMaxClanMember;
        case 865: return ErrorClanMasterUnreg;
        case 866: return ErrorClanNameNotExists;
        case 867: return ErrorClanSeasonNotOpenTime;
        case 868: return ErrorAlreadyJoinClanSeason;
        case 869: return ErrorMaxClanViceMaster;
        case 870: return ErrorInvalidChangeClanMemberGrade;
        case 871: return ErrorNotFineClanMember;
        case 872: return ErrorClanGradeBeyondPower;
        case 873: return ErrorDestroyClanExistMember;
        case 874: return ErrorKickClanMyself;
        case 875: return ErrorNotClanViceMaster;
        case 876: return ErrorInvalidClanChattingNoticeLenth;
        case 877: return ErrorInvalidClanChattingNotice;
        case 878: return ErrorInvalidClanCommentLenth;
        case 879: return ErrorInvalidClanComment;
        case 880: return ErrorInvalidClanDescLenth;
        case 881: return ErrorNotChangeClanData;
        case 882: return ErrorNotClanOpenConditon;
        case 883: return ErrorInvalidClanSeason;
        case 884: return ErrorInvalidClanPhase;
        case 885: return ErrorInvalidClanBattleCnt;
        case 886: return ErrorClanBossAlreadyDead;
        case 887: return ErrorTodayLeaveClan;
        case 888: return ErrorNotEnoughMemberApplyClanWar;
        case 889: return ErrorApplyClanWarOnPhase;
        case 890: return ErrorSanctionedClanMember;
        case 891: return ErrorAcceptClanApplyOnPhase;
        case 892: return ErrorPickSameStage;
        case 893: return ErrorClanMemberCountInsufficient;
        case 894: return ErrorMaxApprenticeMember;
        case 895: return ErrorSendMaxScoutApply;
        case 896: return ErrorReceiveMaxScoutApply;
        case 897: return ErrorInvalidCountryForScout;
        case 898: return ErrorInvalidApplyClanMemberGrade;
        case 899: return ErrorBattleSimulateInvalid;
        case 900: return ErrorNoticeRestrictInServiceCheck;
        case 901: return ErrorInvalidClanApprenticeTimeCondition;
        case 902: return ErrorClanUserScoutNotExists;
        case 903: return ErrorAlreadyScoutUser;
        case 904: return ErrorTodayAlreadyScoutUser;
        case 905: return ErrorAlreadyClanAttend;
        case 906: return ErrorAlreadyReceivedClanJoinRequest;
        case 907: return ErrorNotClearCVCApplyCondition;
        case 908: return ErrorNotClearCVCApplyMemberCondition;
        case 909: return ErrorDisableApplyCVCTime;
        case 910: return ErrorAlreadyApplyCVC;
        case 911: return ErrorNotApplyCVC;
        case 912: return ErrorCVCMemberNotLeaveClan;
        case 913: return ErrorInvalidCVCMonsterDefenceSlot;
        case 914: return ErrorCannotChangeCVCMonsterSlotOnPhase;
        case 915: return ErrorCVCMemberBattleIsNotFinished;
        case 916: return ErrorNotCVCMatching;
        case 917: return ErrorInvalidCVCEnemyMemberId;
        case 918: return ErrorNotEnoughCVCMemberBattleCount;
        case 919: return ErrorNotExistCVCMonsterSlot;
        case 920: return ErrorDestroyClanJoinCVC;
        case 921: return ErrorPromisePackageAlready;
        case 922: return ErrorInvalidPromisePackage;
        case 923: return ErrorNotCVCMember;
        case 924: return ErrorUserMonsterOnCVCDefense;
        case 925: return ErrorEnemyCVCEnergyIsZero;
        case 926: return ErrorCVCPhaseEnd;
        case 927: return ErrorSuperStoneStuffsInsufficient;
        case 928: return ErrorSuperStoneAlreadyMax;
        case 929: return ErrorSuperStoneStuffsAlreadyMax;
        case 930: return ErrorCombiningSuperStoneNotFinished;
        case 931: return ErrorNotExistCombiningSuperStone;
        case 932: return ErrorInvalidMonsterForSuperEvolution;
        case 933: return ErrorSuperStoneInsufficient;
        case 940: return ErrorInvalidCVCJoinMemberCount;
        case 941: return ErrorRenewBeforeSeason;
        case 942: return ErrorNotMonthlyMonsterSeason;
        case 943: return ErrorMonthlyMonsterSeasonChange;
        case 990: return ErrorInvalidBanhaoUserID;
        case 991: return ErrorInvalidBanhaoUserPW;
        case 999: return ErrorForceFinishTransaction;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Result>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Result> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Result>() {
            public Result findValueByNumber(int number) {
              return Result.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.felania.msldb.ResultOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final Result[] VALUES = values();

    public static Result valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Result(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:msggamedata.Result)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014Result.proto\022\013msggamedata*\266J\n\006Result\022\014" +
      "\n\010ResultOk\020\000\022\020\n\014ErrorUnknown\020\001\022\037\n\033ErrorI" +
      "nvalidProtocolVersion\020\002\022\023\n\017ErrorCountLim" +
      "it\020\n\022\022\n\016ErrorTimeLimit\020\013\022\034\n\030ErrorInterna" +
      "lServerError\0202\022\024\n\020ErrorDataInvalid\020<\022\036\n\032" +
      "ErrorUserNameAlreadyExists\020=\022\030\n\024ErrorUse" +
      "rNameInvalid\020>\022\032\n\026ErrorUserNotRegistered" +
      "\020?\022\036\n\032ErrorUserAlreadyRegistered\020@\022\032\n\026Er" +
      "rorUserNameForbidden\020A\022\037\n\033ErrorUserNameR" +
      "estrictLength\020B\022\034\n\030ErrorUserDuplicatedLo",
      "gin\020C\022\034\n\030ErrorPlatformTypeNotFind\020D\022\"\n\036E" +
      "rrorPlatformAccountIdNotExist\020E\022\030\n\024Error" +
      "AccountNotExist\020F\022\030\n\024ErrorAccountWithdra" +
      "w\020O\022&\n\"ErrorAlreadyCreatedPlatformAccoun" +
      "t\020P\022\020\n\014ErrorAbusing\020Z\022\024\n\020ErrorNearAbusin" +
      "g\020[\022\033\n\027ErrorLoginOnMaintenance\020\\\022\024\n\020Erro" +
      "rUserInvalid\020d\022\034\n\030ErrorUserPasswordInval" +
      "id\020e\022\031\n\025ErrorUserTokenInvalid\020f\022\031\n\025Error" +
      "UserSeqNoInvalid\020g\022\032\n\026ErrorUserTicketInv" +
      "alid\020h\022\031\n\025ErrorUserCacheInvalid\020i\022\027\n\023Err",
      "orUserSanctioned\020j\022\027\n\023ErrorUserNickExist" +
      "s\020n\022\027\n\023ErrorUserNickDenied\020o\022\035\n\030ErrorUse" +
      "rGemInsufficient\020\226\001\022\036\n\031ErrorUserGoldInsu" +
      "fficient\020\227\001\022\037\n\032ErrorUserLevelInsufficien" +
      "t\020\230\001\022$\n\037ErrorUserArenaPointInsufficient\020" +
      "\231\001\022%\n ErrorUserArenaTicketInsufficient\020\232" +
      "\001\022&\n!ErrorUserDungeonPointInsufficient\020\233" +
      "\001\022$\n\037ErrorUserLikeTicketInsufficient\020\234\001\022" +
      "!\n\034ErrorUserCrystalInsufficient\020\235\001\022%\n Er" +
      "rorUserBeyondStoneInsufficient\020\236\001\022#\n\036Err",
      "orUserClanPointInsufficient\020\237\001\022\031\n\024ErrorF" +
      "riendRequestMe\020\252\001\022\031\n\024ErrorFriendNotExist" +
      "s\020\253\001\022\025\n\020ErrorFriendsFull\020\254\001\022\033\n\026ErrorFrie" +
      "ndsBreakUpMax\020\255\001\022\035\n\030ErrorFriendsReceiver" +
      "Full\020\256\001\022 \n\033ErrorFriendAlreadyRequested\020\257" +
      "\001\022\037\n\032ErrorFriendAlreadyAccepted\020\260\001\022\026\n\021Er" +
      "rorFriendFindMe\020\261\001\022\035\n\030ErrorMailAlreadyAc" +
      "cepted\020\264\001\022\033\n\026ErrorMailInventoryFull\020\265\001\022\031" +
      "\n\024ErrorMailBodyTooLong\020\266\001\022\025\n\020ErrorMailIn" +
      "valid\020\267\001\022\031\n\024ErrorMailNotAccepted\020\270\001\022\034\n\027E",
      "rrorMailAlreadyDeleted\020\271\001\022\036\n\031ErrorUserMo" +
      "nsterNotExists\020\272\001\022\036\n\031ErrorUserUnknownPay" +
      "Method\020\273\001\022(\n#ErrorUserMonsterSummonableC" +
      "ountZero\020\274\001\022!\n\034ErrorUserMonsterNotEnough" +
      "Lev\020\275\001\022\'\n\"ErrorUserMonsterNotEnoughEvolu" +
      "tion\020\276\001\022$\n\037ErrorUserMonsterAlreadyMaxLev" +
      "el\020\277\001\022)\n$ErrorUserMonsterNotEnoughBeyond" +
      "Stone\020\300\001\022\'\n\"ErrorUserMonsterNotEnoughSou" +
      "lstone\020\301\001\022(\n#ErrorUserMonsterAlreadyMaxE" +
      "volution\020\302\001\022\'\n\"ErrorUserMonsterNotEnough",
      "BornGrade\020\303\001\022#\n\036ErrorUserMonsterAlreadyS" +
      "pecial\020\304\001\022 \n\033ErrorUserMonsterIncongruity" +
      "\020\305\001\022\033\n\026ErrorUserMonsterExceed\020\306\001\022 \n\033Erro" +
      "rUserMonsterFullyWarmUp\020\307\001\022 \n\033ErrorUserE" +
      "nergyInsufficient\020\310\001\022\036\n\031ErrorUserEnergyA" +
      "lreadyMax\020\311\001\022\035\n\030ErrorUserArenaAlreadyMax" +
      "\020\312\001\022\037\n\032ErrorShopMetaGunAlreadyMax\020\313\001\022\"\n\035" +
      "ErrorShopMetaBulletAlreadyMax\020\314\001\022\033\n\026Erro" +
      "rUserMonsterLocked\020\315\001\022)\n$ErrorUserMonste" +
      "rRepresentationLocked\020\316\001\022\037\n\032ErrorRuneMet",
      "aNoMileageItem\020\317\001\022\034\n\027RuneMetaJustUsedMil" +
      "eage\020\320\001\022*\n%ErrorMonsterMetaNotAvailableT" +
      "imestamp\020\321\001\022 \n\033ErrorMonsterSlotAlreadyFu" +
      "ll\020\322\001\022$\n\037ErrorUserCaptureBulletNotEnough" +
      "\020\323\001\022\022\n\rErrorTimeLeft\020\324\001\022\027\n\022ErrorGiftNotE" +
      "xists\020\325\001\022\'\n\"ErrorUserDungeonTicketInsuff" +
      "icient\020\326\001\022\"\n\035ErrorDungeonTodayIsNotOpenD" +
      "ay\020\327\001\022\'\n\"ErrorUserMonsterSummonLimitExpi" +
      "red\020\330\001\022\"\n\035ErrorArenaDefenseHasEmptySlot\020" +
      "\331\001\022\'\n\"ErrorRuneMetaNotAvailableTimestamp",
      "\020\332\001\022&\n!ErrorSupportMonsterCanNotUseToday" +
      "\020\333\001\022#\n\036ErrorSupportMonsterAlreadyUsed\020\334\001" +
      "\022\034\n\027ErrorNotEnoughSentCount\020\335\001\022&\n!ErrorA" +
      "renaCandidatesIsNotAllClear\020\336\001\022-\n(ErrorS" +
      "upportMonsterCanNotUseExcludeStory\020\337\001\022#\n" +
      "\036ErrorArenaRankServerNoResponse\020\340\001\022\030\n\023Er" +
      "rorRankingInReset\020\341\001\022 \n\033ErrorIAPReceiptC" +
      "heckInvalid\020\342\001\022\035\n\030ErrorIAPReceiptCheckFa" +
      "il\020\343\001\022\"\n\035ErrorLobbyRewardAlreadyRecved\020\344" +
      "\001\022\037\n\032ErrorLobbyRewardTimeExceed\020\345\001\022\035\n\030Er",
      "rorLobbyRewardNotExist\020\346\001\022\033\n\026ErrorArenaE" +
      "nemyInvalid\020\347\001\022#\n\036ErrorUserMonsterOnAren" +
      "aDefense\020\350\001\022\"\n\035ErrorUserMonsterOnForceLo" +
      "cked\020\351\001\022!\n\034ErrorUserMonsterMaxSoulStone\020" +
      "\352\001\022$\n\037ErrorUserMonsterSummonDataError\020\353\001" +
      "\0223\n.ErrorUserMonsterSkillBookNotExistOrC" +
      "ountIsZero\020\354\001\022!\n\034ErrorMonsterNotUseSkill" +
      "Level\020\355\001\022,\n\'ErrorSkillBookIsNotMatchedTo" +
      "UserMonster\020\356\001\022\'\n\"ErrorUserMonsterSkillF" +
      "ullyUpgraded\020\357\001\0221\n,ErrorUserMonsterNotEn",
      "oughGradeToUpgradeSkill\020\360\001\022+\n&ErrorDunge" +
      "onOpenConditionNeedUserLevel\020\361\001\0220\n+Error" +
      "DungeonOpenConditionNotClearedSubStage\020\362" +
      "\001\022\032\n\025ErrorUserRuneNotExist\020\254\002\022!\n\034ErrorUs" +
      "erRuneAlreadyMaxLevel\020\255\002\022\031\n\024ErrorRuneInv" +
      "enExceed\020\256\002\022*\n%ErrorUserMonsterLeaderSki" +
      "llGradeLower\020\257\002\022\032\n\025ErrorUserRuneIsLocked" +
      "\020\260\002\022\"\n\035ErrorAlreadyStoredUserMonster\020\261\002\022" +
      "\035\n\030ErrorUserMonsterIsLocked\020\262\002\022 \n\033ErrorE" +
      "xceedUserMonsterStore\020\263\002\022\"\n\035ErrorMonster",
      "StorageAlreadyMax\020\264\002\022\037\n\032ErrorMonsterStor" +
      "ageInvalid\020\265\002\022!\n\034ErrorUserRuneNotMatched" +
      "Shape\020\266\002\022,\n\'ErrorColossusDungeonMonsterC" +
      "ountInvalid\020\336\002\022\034\n\027ErrorUseSameRootMonste" +
      "r\020\337\002\022-\n(ErrorMaxSpecialGuradianDungeonCl" +
      "earCount\020\350\002\022 \n\033ErrorMonsterInvenAlreadyM" +
      "ax\020\220\003\022\"\n\035ErrorMonsterInvenInvalidPrice\020\221" +
      "\003\022\034\n\027ErrorMonsterInvenExceed\020\222\003\022$\n\037Error" +
      "BingoInsufficientForReward\020\224\003\022\035\n\030ErrorBi" +
      "ngoInvalidRequest\020\225\003\022\033\n\026ErrorBingoDataNo",
      "tExist\020\226\003\022!\n\034ErrorCaptureFestivalNotExis" +
      "t\020\302\003\022%\n ErrorUserCaptureFestivalNotExist" +
      "\020\303\003\022&\n!ErrorInvalidCaptureFestivalSeason" +
      "\020\304\003\022,\n\'ErrorInvalidCaptureFestivalFinale" +
      "Season\020\305\003\022!\n\034ErrorLuckyTicketInsufficien" +
      "t\020\306\003\022\030\n\023ErrorMaxLuckyTicket\020\307\003\022+\n&ErrorL" +
      "ogRefreshCaptureFestivalNotExist\020\310\003\022\036\n\031E" +
      "rrorAlreadyGetRankReward\020\311\003\022$\n\037ErrorAlre" +
      "adyGetBonusLuckyTicket\020\312\003\022 \n\033ErrorBonusL" +
      "uckyTicketIsGone\020\313\003\022\032\n\025ErrorShopStockInv",
      "alid\020\364\003\022\037\n\032ErrorItemCountInsufficient\020\365\003" +
      "\022\025\n\020ErrorItemInvalid\020\366\003\022\032\n\025ErrorItemReta" +
      "inExceed\020\367\003\022!\n\034ErrorBeyondStoneRetainExc" +
      "eed\020\370\003\022\032\n\025ErrorUserItemNotExist\020\371\003\022\022\n\rEr" +
      "rorPurchase\020\246\004\022\035\n\030ErrorInvalidPurchaseIt" +
      "em\020\247\004\022\033\n\026ErrorInvalidPurchaseId\020\250\004\022\035\n\030Er" +
      "rorInvalidPurchaseData\020\251\004\022!\n\034ErrorAlread" +
      "yCompletePurchase\020\252\004\022 \n\033ErrorAlreadyPurc" +
      "hasePackage\020\253\004\022\033\n\026ErrorClosedPackageItem" +
      "\020\254\004\022\034\n\027ErrorInvalidPackageItem\020\255\004\022#\n\036Err",
      "orInvalidPackageRewardIndex\020\256\004\022%\n ErrorA" +
      "lreadyReceivePackageReward\020\257\004\022 \n\033ErrorAl" +
      "readyCompletePackage\020\260\004\022\035\n\030ErrorInvalidP" +
      "ackageQuest\020\261\004\022\035\n\030ErrorExpiredJojeShopIt" +
      "em\020\262\004\022\033\n\026ErrorDuplicatedOrderID\020\263\004\022%\n Er" +
      "rorInvalidPackagePurchaseBonus\020\264\004\022\037\n\032Err" +
      "orNotAvailableProductId\020\265\004\022\030\n\023ErrorClose" +
      "dShopItem\020\266\004\022\'\n\"ErrorAlreadyPurchaseFest" +
      "ivalTicket\020\267\004\022\"\n\035ErrorNotAvailableHeroFe" +
      "stival\020\270\004\022(\n#ErrorUserFestivalTicketInsu",
      "fficient\020\271\004\022%\n ErrorNotAvailableTicketSa" +
      "lesDate\020\272\004\022\035\n\030ErrorExceedUserSkillBook\020\273" +
      "\004\022\033\n\026ErrorNotInClanFestival\020\274\004\022!\n\034ErrorI" +
      "nvalidClanFestivalGift\020\275\004\022!\n\034ErrorHeroEs" +
      "senceInsufficient\020\276\004\022\"\n\035ErrorGetMaxClanF" +
      "estivalReward\020\277\004\022\037\n\032ErrorInvalidBoosterP" +
      "ackage\020\300\004\022#\n\036ErrorPurchaseDuplicatedPack" +
      "age\020\330\004\022\"\n\035ErrorPurchaseAppleServerError\020" +
      "\331\004\022\027\n\022ErrorReservedCode3\020\332\004\022\027\n\022ErrorRese" +
      "rvedCode4\020\333\004\022\027\n\022ErrorReservedCode5\020\334\004\022\037\n",
      "\032ErrorItemBundleMaxPurchase\020\212\005\022!\n\034ErrorI" +
      "temBundleNotSalePeriod\020\213\005\022!\n\034ErrorInvali" +
      "dItemBundleReward\020\214\005\022\033\n\026ErrorInvalidItem" +
      "Bundle\020\215\005\022\"\n\035ErrorAlreadyPurchaseLobbySh" +
      "ip\020\224\005\022\031\n\024ErrorUserShipExpired\020\225\005\022\031\n\024Erro" +
      "rInvalidUserShip\020\226\005\022\034\n\027ErrorUserShipNotU" +
      "pdated\020\227\005\022 \n\033ErrorExistUnexpiredUserShip" +
      "\020\230\005\022\027\n\022ErrorQuestNotFound\020\274\005\022\031\n\024ErrorQue" +
      "stIncomplete\020\275\005\022\037\n\032ErrorQuestAlreadyComp" +
      "leted\020\276\005\022#\n\036ErrorInvalidContractMonsterU",
      "id\020\356\005\022$\n\037ErrorBattleFriendMonsterExpired" +
      "\020\241\006\022.\n)ErrorBattleFriendMonsterNoMoreRep" +
      "rMonster\020\242\006\022\035\n\030ErrorBattleFriendDeleted\020" +
      "\243\006\022#\n\036ErrorBattleAlreadyUsedBattleId\020\244\006\022" +
      "\030\n\023ErrorClanApprentice\020\321\006\022\031\n\024ErrorAlread" +
      "yJoinClan\020\322\006\022\027\n\022ErrorClanNotExists\020\323\006\022\031\n" +
      "\024ErrorInvalidClanName\020\324\006\022\031\n\024ErrorInvalid" +
      "ClanDesc\020\325\006\022\036\n\031ErrorAlreadyExistClanName" +
      "\020\326\006\022\032\n\025ErrorAlreadyApplyClan\020\327\006\022\037\n\032Error" +
      "TodayAlreadyApplyClan\020\330\006\022\026\n\021ErrorMaxClan",
      "Apply\020\331\006\022\027\n\022ErrorNotClanMember\020\332\006\022\030\n\023Err" +
      "orNotClanManager\020\333\006\022\027\n\022ErrorNotClanMaste" +
      "r\020\334\006\022 \n\033ErrorClanJoinApplyNotExists\020\335\006\022\036" +
      "\n\031ErrorAlreadyCanceledApply\020\336\006\022&\n!ErrorI" +
      "nvalidClanMemberGradeChange\020\337\006\022\027\n\022ErrorM" +
      "axClanMember\020\340\006\022\031\n\024ErrorClanMasterUnreg\020" +
      "\341\006\022\033\n\026ErrorClanNameNotExists\020\342\006\022\037\n\032Error" +
      "ClanSeasonNotOpenTime\020\343\006\022\037\n\032ErrorAlready" +
      "JoinClanSeason\020\344\006\022\033\n\026ErrorMaxClanViceMas" +
      "ter\020\345\006\022&\n!ErrorInvalidChangeClanMemberGr",
      "ade\020\346\006\022\033\n\026ErrorNotFineClanMember\020\347\006\022\036\n\031E" +
      "rrorClanGradeBeyondPower\020\350\006\022 \n\033ErrorDest" +
      "royClanExistMember\020\351\006\022\030\n\023ErrorKickClanMy" +
      "self\020\352\006\022\033\n\026ErrorNotClanViceMaster\020\353\006\022(\n#" +
      "ErrorInvalidClanChattingNoticeLenth\020\354\006\022#" +
      "\n\036ErrorInvalidClanChattingNotice\020\355\006\022!\n\034E" +
      "rrorInvalidClanCommentLenth\020\356\006\022\034\n\027ErrorI" +
      "nvalidClanComment\020\357\006\022\036\n\031ErrorInvalidClan" +
      "DescLenth\020\360\006\022\033\n\026ErrorNotChangeClanData\020\361" +
      "\006\022\035\n\030ErrorNotClanOpenConditon\020\362\006\022\033\n\026Erro",
      "rInvalidClanSeason\020\363\006\022\032\n\025ErrorInvalidCla" +
      "nPhase\020\364\006\022\036\n\031ErrorInvalidClanBattleCnt\020\365" +
      "\006\022\035\n\030ErrorClanBossAlreadyDead\020\366\006\022\030\n\023Erro" +
      "rTodayLeaveClan\020\367\006\022%\n ErrorNotEnoughMemb" +
      "erApplyClanWar\020\370\006\022\035\n\030ErrorApplyClanWarOn" +
      "Phase\020\371\006\022\036\n\031ErrorSanctionedClanMember\020\372\006" +
      "\022 \n\033ErrorAcceptClanApplyOnPhase\020\373\006\022\027\n\022Er" +
      "rorPickSameStage\020\374\006\022%\n ErrorClanMemberCo" +
      "untInsufficient\020\375\006\022\035\n\030ErrorMaxApprentice" +
      "Member\020\376\006\022\033\n\026ErrorSendMaxScoutApply\020\377\006\022\036",
      "\n\031ErrorReceiveMaxScoutApply\020\200\007\022 \n\033ErrorI" +
      "nvalidCountryForScout\020\201\007\022%\n ErrorInvalid" +
      "ApplyClanMemberGrade\020\202\007\022\037\n\032ErrorBattleSi" +
      "mulateInvalid\020\203\007\022&\n!ErrorNoticeRestrictI" +
      "nServiceCheck\020\204\007\022,\n\'ErrorInvalidClanAppr" +
      "enticeTimeCondition\020\205\007\022 \n\033ErrorClanUserS" +
      "coutNotExists\020\206\007\022\032\n\025ErrorAlreadyScoutUse" +
      "r\020\207\007\022\037\n\032ErrorTodayAlreadyScoutUser\020\210\007\022\033\n" +
      "\026ErrorAlreadyClanAttend\020\211\007\022(\n#ErrorAlrea" +
      "dyReceivedClanJoinRequest\020\212\007\022#\n\036ErrorNot",
      "ClearCVCApplyCondition\020\213\007\022)\n$ErrorNotCle" +
      "arCVCApplyMemberCondition\020\214\007\022\035\n\030ErrorDis" +
      "ableApplyCVCTime\020\215\007\022\031\n\024ErrorAlreadyApply" +
      "CVC\020\216\007\022\025\n\020ErrorNotApplyCVC\020\217\007\022\037\n\032ErrorCV" +
      "CMemberNotLeaveClan\020\220\007\022&\n!ErrorInvalidCV" +
      "CMonsterDefenceSlot\020\221\007\022+\n&ErrorCannotCha" +
      "ngeCVCMonsterSlotOnPhase\020\222\007\022&\n!ErrorCVCM" +
      "emberBattleIsNotFinished\020\223\007\022\030\n\023ErrorNotC" +
      "VCMatching\020\224\007\022!\n\034ErrorInvalidCVCEnemyMem" +
      "berId\020\225\007\022\'\n\"ErrorNotEnoughCVCMemberBattl",
      "eCount\020\226\007\022 \n\033ErrorNotExistCVCMonsterSlot" +
      "\020\227\007\022\034\n\027ErrorDestroyClanJoinCVC\020\230\007\022\037\n\032Err" +
      "orPromisePackageAlready\020\231\007\022\037\n\032ErrorInval" +
      "idPromisePackage\020\232\007\022\026\n\021ErrorNotCVCMember" +
      "\020\233\007\022!\n\034ErrorUserMonsterOnCVCDefense\020\234\007\022\036" +
      "\n\031ErrorEnemyCVCEnergyIsZero\020\235\007\022\025\n\020ErrorC" +
      "VCPhaseEnd\020\236\007\022&\n!ErrorSuperStoneStuffsIn" +
      "sufficient\020\237\007\022\036\n\031ErrorSuperStoneAlreadyM" +
      "ax\020\240\007\022$\n\037ErrorSuperStoneStuffsAlreadyMax" +
      "\020\241\007\022(\n#ErrorCombiningSuperStoneNotFinish",
      "ed\020\242\007\022%\n ErrorNotExistCombiningSuperSton" +
      "e\020\243\007\022)\n$ErrorInvalidMonsterForSuperEvolu" +
      "tion\020\244\007\022 \n\033ErrorSuperStoneInsufficient\020\245" +
      "\007\022#\n\036ErrorInvalidCVCJoinMemberCount\020\254\007\022\033" +
      "\n\026ErrorRenewBeforeSeason\020\255\007\022!\n\034ErrorNotM" +
      "onthlyMonsterSeason\020\256\007\022$\n\037ErrorMonthlyMo" +
      "nsterSeasonChange\020\257\007\022\035\n\030ErrorInvalidBanh" +
      "aoUserID\020\336\007\022\035\n\030ErrorInvalidBanhaoUserPW\020" +
      "\337\007\022 \n\033ErrorForceFinishTransaction\020\347\007B\023\n\021" +
      "com.felania.msldbb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}

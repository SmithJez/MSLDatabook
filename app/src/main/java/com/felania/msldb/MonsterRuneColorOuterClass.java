// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterRuneColor.proto

package com.felania.msldb;

public final class MonsterRuneColorOuterClass {
  private MonsterRuneColorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code msggamedata.MonsterRuneColor}
   */
  public enum MonsterRuneColor
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MRC_None = 0;</code>
     */
    MRC_None(0),
    /**
     * <code>MRC_Red = 1;</code>
     */
    MRC_Red(1),
    /**
     * <code>MRC_Orange = 2;</code>
     */
    MRC_Orange(2),
    /**
     * <code>MRC_Yellow = 3;</code>
     */
    MRC_Yellow(3),
    /**
     * <code>MRC_Green = 4;</code>
     */
    MRC_Green(4),
    /**
     * <code>MRC_Blue = 5;</code>
     */
    MRC_Blue(5),
    /**
     * <code>MRC_Purple = 6;</code>
     */
    MRC_Purple(6),
    /**
     * <code>MRC_White = 7;</code>
     */
    MRC_White(7),
    /**
     * <code>MRC_Emarald = 8;</code>
     */
    MRC_Emarald(8),
    /**
     * <code>MRC_Scarlet = 9;</code>
     */
    MRC_Scarlet(9),
    /**
     * <code>MRC_Lightgreen = 10;</code>
     */
    MRC_Lightgreen(10),
    /**
     * <code>MRC_Pink = 11;</code>
     */
    MRC_Pink(11),
    /**
     * <code>MRC_HealMyHp = 12;</code>
     */
    MRC_HealMyHp(12),
    /**
     * <code>MRC_HealMyMp = 13;</code>
     */
    MRC_HealMyMp(13),
    /**
     * <code>MRC_IncHp = 14;</code>
     */
    MRC_IncHp(14),
    /**
     * <code>MRC_IncMp = 15;</code>
     */
    MRC_IncMp(15),
    /**
     * <code>MRC_Shield = 16;</code>
     */
    MRC_Shield(16),
    /**
     * <code>MRC_Stun = 17;</code>
     */
    MRC_Stun(17),
    /**
     * <code>MRC_Inc_Blue_Dec_Orange = 18;</code>
     */
    MRC_Inc_Blue_Dec_Orange(18),
    /**
     * <code>MRC_Inc_Orange_Dec_Blue = 19;</code>
     */
    MRC_Inc_Orange_Dec_Blue(19),
    /**
     * <code>MRC_Inc_Green_Dec_Blue = 20;</code>
     */
    MRC_Inc_Green_Dec_Blue(20),
    /**
     * <code>MRC_Inc_Red_Dec_Yellow = 21;</code>
     */
    MRC_Inc_Red_Dec_Yellow(21),
    /**
     * <code>MRC_Inc_Yellow_Dec_Red = 22;</code>
     */
    MRC_Inc_Yellow_Dec_Red(22),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>MRC_None = 0;</code>
     */
    public static final int MRC_None_VALUE = 0;
    /**
     * <code>MRC_Red = 1;</code>
     */
    public static final int MRC_Red_VALUE = 1;
    /**
     * <code>MRC_Orange = 2;</code>
     */
    public static final int MRC_Orange_VALUE = 2;
    /**
     * <code>MRC_Yellow = 3;</code>
     */
    public static final int MRC_Yellow_VALUE = 3;
    /**
     * <code>MRC_Green = 4;</code>
     */
    public static final int MRC_Green_VALUE = 4;
    /**
     * <code>MRC_Blue = 5;</code>
     */
    public static final int MRC_Blue_VALUE = 5;
    /**
     * <code>MRC_Purple = 6;</code>
     */
    public static final int MRC_Purple_VALUE = 6;
    /**
     * <code>MRC_White = 7;</code>
     */
    public static final int MRC_White_VALUE = 7;
    /**
     * <code>MRC_Emarald = 8;</code>
     */
    public static final int MRC_Emarald_VALUE = 8;
    /**
     * <code>MRC_Scarlet = 9;</code>
     */
    public static final int MRC_Scarlet_VALUE = 9;
    /**
     * <code>MRC_Lightgreen = 10;</code>
     */
    public static final int MRC_Lightgreen_VALUE = 10;
    /**
     * <code>MRC_Pink = 11;</code>
     */
    public static final int MRC_Pink_VALUE = 11;
    /**
     * <code>MRC_HealMyHp = 12;</code>
     */
    public static final int MRC_HealMyHp_VALUE = 12;
    /**
     * <code>MRC_HealMyMp = 13;</code>
     */
    public static final int MRC_HealMyMp_VALUE = 13;
    /**
     * <code>MRC_IncHp = 14;</code>
     */
    public static final int MRC_IncHp_VALUE = 14;
    /**
     * <code>MRC_IncMp = 15;</code>
     */
    public static final int MRC_IncMp_VALUE = 15;
    /**
     * <code>MRC_Shield = 16;</code>
     */
    public static final int MRC_Shield_VALUE = 16;
    /**
     * <code>MRC_Stun = 17;</code>
     */
    public static final int MRC_Stun_VALUE = 17;
    /**
     * <code>MRC_Inc_Blue_Dec_Orange = 18;</code>
     */
    public static final int MRC_Inc_Blue_Dec_Orange_VALUE = 18;
    /**
     * <code>MRC_Inc_Orange_Dec_Blue = 19;</code>
     */
    public static final int MRC_Inc_Orange_Dec_Blue_VALUE = 19;
    /**
     * <code>MRC_Inc_Green_Dec_Blue = 20;</code>
     */
    public static final int MRC_Inc_Green_Dec_Blue_VALUE = 20;
    /**
     * <code>MRC_Inc_Red_Dec_Yellow = 21;</code>
     */
    public static final int MRC_Inc_Red_Dec_Yellow_VALUE = 21;
    /**
     * <code>MRC_Inc_Yellow_Dec_Red = 22;</code>
     */
    public static final int MRC_Inc_Yellow_Dec_Red_VALUE = 22;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MonsterRuneColor valueOf(int value) {
      return forNumber(value);
    }

    public static MonsterRuneColor forNumber(int value) {
      switch (value) {
        case 0: return MRC_None;
        case 1: return MRC_Red;
        case 2: return MRC_Orange;
        case 3: return MRC_Yellow;
        case 4: return MRC_Green;
        case 5: return MRC_Blue;
        case 6: return MRC_Purple;
        case 7: return MRC_White;
        case 8: return MRC_Emarald;
        case 9: return MRC_Scarlet;
        case 10: return MRC_Lightgreen;
        case 11: return MRC_Pink;
        case 12: return MRC_HealMyHp;
        case 13: return MRC_HealMyMp;
        case 14: return MRC_IncHp;
        case 15: return MRC_IncMp;
        case 16: return MRC_Shield;
        case 17: return MRC_Stun;
        case 18: return MRC_Inc_Blue_Dec_Orange;
        case 19: return MRC_Inc_Orange_Dec_Blue;
        case 20: return MRC_Inc_Green_Dec_Blue;
        case 21: return MRC_Inc_Red_Dec_Yellow;
        case 22: return MRC_Inc_Yellow_Dec_Red;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MonsterRuneColor>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MonsterRuneColor> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MonsterRuneColor>() {
            public MonsterRuneColor findValueByNumber(int number) {
              return MonsterRuneColor.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.felania.msldb.MonsterRuneColorOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final MonsterRuneColor[] VALUES = values();

    public static MonsterRuneColor valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MonsterRuneColor(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:msggamedata.MonsterRuneColor)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026MonsterRuneColor.proto\022\013msggamedata*\273\003" +
      "\n\020MonsterRuneColor\022\014\n\010MRC_None\020\000\022\013\n\007MRC_" +
      "Red\020\001\022\016\n\nMRC_Orange\020\002\022\016\n\nMRC_Yellow\020\003\022\r\n" +
      "\tMRC_Green\020\004\022\014\n\010MRC_Blue\020\005\022\016\n\nMRC_Purple" +
      "\020\006\022\r\n\tMRC_White\020\007\022\017\n\013MRC_Emarald\020\010\022\017\n\013MR" +
      "C_Scarlet\020\t\022\022\n\016MRC_Lightgreen\020\n\022\014\n\010MRC_P" +
      "ink\020\013\022\020\n\014MRC_HealMyHp\020\014\022\020\n\014MRC_HealMyMp\020" +
      "\r\022\r\n\tMRC_IncHp\020\016\022\r\n\tMRC_IncMp\020\017\022\016\n\nMRC_S" +
      "hield\020\020\022\014\n\010MRC_Stun\020\021\022\033\n\027MRC_Inc_Blue_De" +
      "c_Orange\020\022\022\033\n\027MRC_Inc_Orange_Dec_Blue\020\023\022" +
      "\032\n\026MRC_Inc_Green_Dec_Blue\020\024\022\032\n\026MRC_Inc_R" +
      "ed_Dec_Yellow\020\025\022\032\n\026MRC_Inc_Yellow_Dec_Re" +
      "d\020\026B\023\n\021com.felania.msldbb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
